/**
 * Context-sensitive pointer analysis with context of 2 call site and
 * a context-sensitive heap abstraction of 1 call site
 *
 * @author Martin Bravenboer
 * @author George Kastrinis
 */

#include "macros.logic"
#include "../context-sensitive.logic"
#include "../library.logic"

// In this analysis, the real context is a pair of MethodInvocationRefs
// and the real heap context a single MethodInvocationRef. Keeping mapping 
// functions is the way to handle analyses where HContext = Context 
// (since the language considers them different types).
ContextFromRealContext[?invocation1, ?invocation2] = ?ctx ->
  Context(?ctx), CallGraphEdgeSourceRef(?invocation1), CallGraphEdgeSourceRef(?invocation2).
lang:skolem(`ContextFromRealContext).
RealContext1FromContext[?ctx] = ?invocation -> 
  Context(?ctx), CallGraphEdgeSourceRef(?invocation).
RealContext2FromContext[?ctx] = ?invocation -> 
  Context(?ctx), CallGraphEdgeSourceRef(?invocation).

RealContext1FromContext[?ctx] = ?invocation1,
RealContext2FromContext[?ctx] = ?invocation2 <- 
  ContextFromRealContext[?invocation1, ?invocation2] = ?ctx.

HContextFromRealHContext[?invocation] = ?hctx ->
  HContext(?hctx), CallGraphEdgeSourceRef(?invocation).
lang:skolem(`HContextFromRealHContext).
RealHContextFromHContext[?hctx] = ?invocation -> 
  HContext(?hctx), CallGraphEdgeSourceRef(?invocation).
RealHContextFromHContext[?hctx] = ?invocation <-
  HContextFromRealHContext[?invocation] = ?hctx.

// Creating special immutable method invocation constant
ImmutableInvValue[] = ?immInv <-
  MethodInvocationValue(?immInv, "<<immutable>>").


// Create initial objects with their heapcontexts.
HContextFromRealHContext[?invocation] = ?hctx,
HContext(?hctx),
SystemThreadGroup(?hctx, ?alloc) <-
  MySystemThreadGroup(?invocation, ?alloc).

HContextFromRealHContext[?invocation] = ?hctx,
HContext(?hctx),
MainThreadGroup(?hctx, ?alloc) <-
  MyMainThreadGroup(?invocation, ?alloc).

HContextFromRealHContext[?invocation] = ?hctx,
HContext(?hctx),
MainThread(?hctx, ?alloc) <-
  MyMainThread(?invocation, ?alloc).

StartupInvocation[] = ?startupInvocation <-
  MethodInvocationValue(?startupInvocation, "<<jvm-startup>>").

/**
 * Merge optimization hack
 */

// Better to do the join twice than to waste the space for a full MergeBasis
// relation for this analysis.
lang:derivationType[`MergeBasis] = "Derived".

// For this analysis, we only need two of the parameters that may 
// influence the new context object.
MyMergeBasis(?callerCtx, ?invocation) <-
  MergeBasis(_, _, ?callerCtx, ?invocation).

// We create new context objects sparingly, because of the high cost.
// We also cache them, so they can be looked up without a join.
Context(?calleeCtx),
ContextFromRealContext[RealContext2FromContext[?callerCtx], ?invocation] = ?calleeCtx,
OptimizeMerge[?callerCtx, ?invocation] = ?calleeCtx <-
  MyMergeBasis(?callerCtx, ?invocation).


/**
 * Reachable
 */
ReachableContext(?ctx, ?method),
ContextFromRealContext[?invo, ?invo] = ?ctx,
Context(?ctx)
 <-
  MainMethodDeclaration(?method),
  MethodInvocationValue(?invo, "<<initial-context>>").

ReachableContext(?ctx, ?method),
ContextFromRealContext[?invo, ?invo] = ?ctx,
Context(?ctx)
 <-
  ImplicitReachable(?method),
  MethodInvocationValue(?invo, "<<jvm-startup>>").

ReachableContext(?ctx, ?clinit),
ContextFromRealContext[?invo, ?invo] = ?ctx,
Context(?ctx)
 <-
  InitializedClass(?class),
  ClassInitializer[?class] = ?clinit,
  MethodInvocationValue(?invo, "<<class-initialization>>").
