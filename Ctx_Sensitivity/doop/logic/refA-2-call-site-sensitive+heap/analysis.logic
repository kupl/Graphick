/**
 * Experimental
 *
 * @author Martin Bravenboer
 * @author Yannis Smaragdakis
 * @author George Kastrinis
 */

#include "macros.logic"
#include "../context-sensitive.logic"
#include "../library.logic"

// In this analysis, the real context is a pair of MethodInvocationRefs
// and the real heap context a single MethodInvocationRef. Keeping mapping 
// functions is the way to handle analyses where HContext = Context 
// (since the language considers them different types).
ContextFromRealContext[?invocation1, ?invocation2] = ?ctx ->
  Context(?ctx), CallGraphEdgeSourceRef(?invocation1), CallGraphEdgeSourceRef(?invocation2).
lang:skolem(`ContextFromRealContext).
RealContext1FromContext[?ctx] = ?invocation -> 
  Context(?ctx), CallGraphEdgeSourceRef(?invocation).
RealContext2FromContext[?ctx] = ?invocation -> 
  Context(?ctx), CallGraphEdgeSourceRef(?invocation).

RealContext1FromContext[?ctx] = ?invocation1,
RealContext2FromContext[?ctx] = ?invocation2 <- 
  ContextFromRealContext[?invocation1, ?invocation2] = ?ctx.

HContextFromRealHContext[?invocation] = ?hctx ->
  HContext(?hctx), CallGraphEdgeSourceRef(?invocation).
lang:skolem(`HContextFromRealHContext).
RealHContextFromHContext[?hctx] = ?invocation -> 
  HContext(?hctx), CallGraphEdgeSourceRef(?invocation).
RealHContextFromHContext[?hctx] = ?invocation <-
  HContextFromRealHContext[?invocation] = ?hctx.

// Creating special immutable method invocation constant
ImmutableInvValue[] = ?immInv <-
  MethodInvocationValue(?immInv, "<<immutable>>").
// and initial invocation constant
InitialInvValue[] = ?initInv <-
  MethodInvocationValue(?initInv, "<<initial-context>>").

// Create initial objects with their heapcontexts.
HContextFromRealHContext[?invocation] = ?hctx,
HContext(?hctx),
SystemThreadGroup(?hctx, ?alloc) <-
  MySystemThreadGroup(?invocation, ?alloc).

HContextFromRealHContext[?invocation] = ?hctx,
HContext(?hctx),
MainThreadGroup(?hctx, ?alloc) <-
  MyMainThreadGroup(?invocation, ?alloc).

HContextFromRealHContext[?invocation] = ?hctx,
HContext(?hctx),
MainThread(?hctx, ?alloc) <-
  MyMainThread(?invocation, ?alloc).

StartupInvocation[] = ?startupInvocation <-
  MethodInvocationValue(?startupInvocation, "<<jvm-startup>>").


/**
 * Reachable
 */
ReachableContext(?ctx, ?method),
ContextFromRealContext[?invo, ?invo] = ?ctx,
Context(?ctx)
 <-
  MainMethodDeclaration(?method),
  MethodInvocationValue(?invo, "<<initial-context>>").

ReachableContext(?ctx, ?method),
ContextFromRealContext[?invo, ?invo] = ?ctx,
Context(?ctx)
 <-
  ImplicitReachable(?method),
  MethodInvocationValue(?invo, "<<jvm-startup>>").

ReachableContext(?ctx, ?clinit),
ContextFromRealContext[?invo, ?invo] = ?ctx,
Context(?ctx)
 <-
  InitializedClass(?class),
  ClassInitializer[?class] = ?clinit,
  MethodInvocationValue(?invo, "<<class-initialization>>").
