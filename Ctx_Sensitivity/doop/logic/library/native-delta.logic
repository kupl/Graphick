/**********************************************************************************
 *
 * Simulation of native code by code generation.
 *
 * Note that some other natives are simulated by logic.
 *
 * @author Martin Bravenboer
 *
 **********************************************************************************/

/**
 *
 * The ugly: macro abstractions
 *
 * This should really be generated from Jimple, but that's currently
 * somewhat complicated.
 */

#define PlusAssignLocal(strFrom, strTo, strMethod) \
  +AssignLocal(?from, ?to, ?method) <- \
    VarRef:Value(?from:strFrom), \
    VarRef:Value(?to:strTo), \
    MethodSignatureRef:Value(?method:strMethod)

#define PlusStoreStaticField(method, local, field) \
  +StoreStaticField(?l, ?sig, ?m) <- \
    MethodSignatureRef:Value(?m:method), \
    VarRef:Value(?l:local), \
    FieldSignatureRef:Value(?sig:field)

#define SimulateNativeAllocation(strMethod, strHeap, strConstructor) \
  +AssignHeapAllocation(?heap, ?return, ?method) \
    <- \
      MethodSignatureRef:Value(?method:strMethod), \
      ReturnVar@previous(?return, ?method), \
      HeapAllocationValue(?heap, strHeap). \
  \
  +SpecialMethodInvocation:Base[?invocation] = ?return, \
  +SpecialMethodInvocation:In(?invocation, ?method), \
  +SpecialMethodInvocation:Signature[?invocation] = ?constructor, \
  PlusMethodInvocationRef(?invocation, ?strInvocation), \
  +Instruction:Index[?invocation] = ?index \
    <- \
      MethodSignatureRef:Value(?method:strMethod), \
      ReturnVar@previous(?return, ?method), \
      ?strInvocation = strMethod + "/native " + strConstructor, \
      MethodSignatureRef:Value(?constructor:strConstructor), \
      ?index = 1

#define SimulateNativeArrayAllocation(strMethod, strArray, strElement, strElementType) \
  +AssignHeapAllocation(?heap, ?return, ?method) \
    <- \
      MethodSignatureRef:Value(?method:strMethod), \
      ReturnVar@previous(?return, ?method), \
      HeapAllocationValue(?heap, strArray). \
  \
  +VarRef:Value(?var), \
  +VarRef:Value(?var:?strVar), \
  +Var:Type[?var] = ?type, \
  +Var:DeclaringMethod(?var, ?method), \
  +AssignHeapAllocation(?heap, ?var, ?method), \
  +StoreArrayIndex(?var, ?base, ?method) \
    <- \
      MethodSignatureRef:Value(?method:strMethod), \
      ReturnVar@previous(?base, ?method), \
      ?strVar = strMethod + "/@native-array-element", \
      Type:Value(?type:strElementType), \
      HeapAllocationValue(?heap, strElement)

#define SimulateNativeStringArrayAllocation(strMethod, strArray, strElement, strElementType) \
  +AssignHeapAllocation(?heap, ?return, ?method) \
    <- \
      MethodSignatureRef:Value(?method:strMethod), \
      ReturnVar@previous(?return, ?method), \
      HeapAllocationValue(?heap, strArray). \
  \
  +VarRef(?var), \
  +VarRef:Value(?var:?strVar), \
  +Var:Type[?var] = ?type, \
  +Var:DeclaringMethod(?var, ?method), \
  +AssignHeapAllocation(?heap, ?var, ?method), \
  +StoreArrayIndex(?var, ?base, ?method) \
    <- \
      MethodSignatureRef:Value(?method:strMethod), \
      ReturnVar@previous(?base, ?method), \
      ?strVar = strMethod + "/@native-array-element", \
      Type:Value(?type:strElementType), \
      HeapAllocationValue(?heap, strElement)

#ifndef PADDLE_COMPAT

#define SimulateNativeStaticToVirtual(strMethod, strVirtual) \
  PlusMethodInvocationRef(?invocation, ?strInvocation), \
  +VirtualMethodInvocation(?invocation, ?signature, ?inmethod), \
  +VirtualMethodInvocation:Base[?invocation] = ?base, \
  +VirtualMethodInvocation:In(?invocation, ?inmethod), \
  +VirtualMethodInvocation:Signature[?invocation] = ?signature, \
  +Instruction:Index[?invocation] = ?index \
    <- \
      MethodSignatureRef:Value(?inmethod:strMethod), \
      ParamIndexRef:Value(?zero:0), \
      FormalParam@previous[?zero, ?inmethod] = ?base, \
      ?strInvocation = strMethod + "/native " + strVirtual, \
      MethodSignatureRef:Value(?signature:strVirtual), \
      ?index = 1.\
  \
  PlusMethodInvocationRef(?invocation, ?strInvocation), \
  +AssignReturnValue[?invocation] = ?return \
    <- \
      MethodSignatureRef:Value(?inmethod:strMethod), \
      ReturnVar@previous(?return, ?inmethod), \
      ?strInvocation = strMethod + "/native " + strVirtual

#else

#define SimulateNativeStaticToVirtual(strMethod, strVirtual) \
  +VirtualMethodInvocation(?invocation, ?virtual, ?inmethod), \
  +VirtualMethodInvocation:Base[?invocation] = ?base, \
  +VirtualMethodInvocation:In(?invocation, ?inmethod), \
  +VirtualMethodInvocation:Signature[?invocation] = ?virtual \
    <- \
      MethodSignatureRef:Value(?native:strMethod), \
      StaticMethodInvocation:Signature[?invocation] = ?native, \
      StaticMethodInvocation:In(?invocation, ?inmethod), \
      ParamIndexRef:Value(?zero:0), \
      ActualParam@previous[?zero, ?invocation] = ?base, \
      MethodSignatureRef:Value(?virtual:strVirtual)
#endif


/**********************************************************************************
 *
 * java.lang.Object
 *
 **********************************************************************************/

/**
 * <java.lang.Object: java.lang.Object clone()>
 *
 * TODO could throw CloneNotSupportedException
 *
 * TODO should check if the object is Cloneable.
 *
 * TODO should return a clone of the heap allocation (not
 *      identity). The behaviour implemented here is based on Soot.
 */
PlusAssignLocal(
  "java.lang.Object.clone/@this",
  "java.lang.Object.clone/@native-return",
  "<java.lang.Object: java.lang.Object clone()>").

/**********************************************************************************
 *
 * java.lang.Class
 *
 **********************************************************************************/

#ifndef PADDLE_COMPAT
+java:lang:Class:newInstance(?invocation, ?to, ?from) <-
  MethodSignatureRef:Value(?newInstance:"<java.lang.Class: java.lang.Object newInstance()>"),
  VirtualMethodInvocation:Signature[?invocation] = ?newInstance,
  AssignReturnValue[?invocation] = ?to,
  VirtualMethodInvocation:Base[?invocation] = ?from.

+java:lang:reflect:Constructor:newInstance(?invocation, ?to, ?base) <-
  MethodSignatureRef:Value(?invoke:"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>"),
  VirtualMethodInvocation:Signature[?invocation] = ?invoke,
  VirtualMethodInvocation:Base[?invocation] = ?base,
  AssignReturnValue[?invocation] = ?to.
/**
 * TODO - In JRE1.3 this is actually not the native method
 *      - In OpenJDK there is a different method getDeclaredMethods0
 *      - In JRE 1.4 this seems to be defined in java.lang.reflect.Method
 */
+java:lang:Class:getDeclaredMethods(?to, ?from) <-
  MethodSignatureRef:Value(?signature:"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>"),
  VirtualMethodInvocation:Signature[?invocation] = ?signature,
  AssignReturnValue[?invocation] = ?to,
  VirtualMethodInvocation:Base[?invocation] = ?from.
#endif

/**********************************************************************************
 *
 * java.lang.System
 *
 ***************************************************/

#ifndef PADDLE_COMPAT
/**
 * <java.lang.System: void setIn0(java.io.InputStream)>
 */
PlusStoreStaticField(
  "<java.lang.System: void setIn0(java.io.InputStream)>",
  "java.lang.System.setIn0/@param0",
  "<java.lang.System: java.io.InputStream in>").

/**
 * <java.lang.System: void setOut0(java.io.PrintStream)>
 */
PlusStoreStaticField(
  "<java.lang.System: void setOut0(java.io.PrintStream)>",
  "java.lang.System.setOut0/@param0",
  "<java.lang.System: java.io.PrintStream out>").

/**
 * <java.lang.System: void setErr0(java.io.PrintStream)>
 */
PlusStoreStaticField(
  "<java.lang.System: void setErr0(java.io.PrintStream)>",
  "java.lang.System.setErr0/@param0",
  "<java.lang.System: java.io.PrintStream err>").
#endif

/**
 * <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
 */
/*
PlusVarRef(?tmp, ?arraycopy, ?tmpStr, ?tmpType),
+LoadArrayIndex(?src, ?tmp, ?arraycopy),
+StoreArrayIndex(?tmp, ?dest, ?arraycopy)
    <-
      MethodSignatureRef:Value(?arraycopy:"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"),
      ParamIndexRef:Value(?zero:0),
      ParamIndexRef:Value(?two:2),
      FormalParam[?zero, ?arraycopy] = ?src,
      FormalParam[?two, ?arraycopy] = ?dest,
      Type:Value(?tmpType:"java.lang.Object"),
      ?tmpStr = "System.arraycopy/@native-tmp".
*/
#ifndef PADDLE_COMPAT
PlusVarRef(?tmp, ?inmethod, ?tmpStr, ?tmpType),
+LoadArrayIndex(?src, ?tmp, ?inmethod),
+StoreArrayIndex(?tmp, ?dest, ?inmethod)
    <-
      MethodSignatureRef:Value(?arraycopy:"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"),
      StaticMethodInvocation(?invocation, ?arraycopy, ?inmethod),
      ParamIndexRef:Value(?zero:0),
      ParamIndexRef:Value(?two:2),
      ActualParam@previous[?zero, ?invocation] = ?src,
      ActualParam@previous[?two, ?invocation] = ?dest,
      MethodInvocationValue(?invocation, ?strInvocation),
      ?tmpStr =  ?strInvocation + "/@tmp-arraycopy",
      Type:Value(?tmpType:"java.lang.Object").
#endif

/**********************************************************************************
 *
 * java.io.FileSystem
 *
 **********************************************************************************/

#ifndef PADDLE_COMPAT
#ifdef OS_UNIX
PlusHeapAllocationRef(?alloc, "java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem", "java.io.UnixFileSystem").
PlusHeapAllocationRef(?alloc, "java.io.UnixFileSystem.list/new java.lang.String[]", "java.lang.String[]").
PlusHeapAllocationRef(?alloc, "java.io.UnixFileSystem.list/new java.lang.String", "java.lang.String").

SimulateNativeAllocation(
  "<java.io.FileSystem: java.io.FileSystem getFileSystem()>",
  "java.io.FileSystem.getFileSystem/new java.io.UnixFileSystem",
  "<java.io.UnixFileSystem: void <init>()>").

SimulateNativeStringArrayAllocation(
  "<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>",
  "java.io.UnixFileSystem.list/new java.lang.String[]",
  "java.io.UnixFileSystem.list/new java.lang.String",
  "java.lang.String").

#endif

#ifdef OS_WIN32
PlusHeapAllocationRef(?alloc, "java.io.FileSystem.getFileSystem/new java.io.Win32FileSystem", "java.io.Win32FileSystem").
PlusHeapAllocationRef(?alloc, "java.io.Win32FileSystem.list/new java.lang.String[]", "java.lang.String[]").
PlusHeapAllocationRef(?alloc, "java.io.Win32FileSystem.list/new java.lang.String", "java.lang.String").

SimulateNativeAllocation(
  "<java.io.FileSystem: java.io.FileSystem getFileSystem()>",
  "java.io.FileSystem.getFileSystem/new java.io.Win32FileSystem",
  "<java.io.Win32FileSystem: void <init>()>").

SimulateNativeStringArrayAllocation(
  "<java.io.Win32FileSystem: java.lang.String[] list(java.io.File)>",
  "java.io.Win32FileSystem.list/new java.lang.String[]",
  "java.io.Win32FileSystem.list/new java.lang.String",
  "java.lang.String").
#endif

#ifdef OS_WINNT
PlusHeapAllocationRef(?alloc, "java.io.FileSystem.getFileSystem/new java.io.WinNTFileSystem", "java.io.WinNTFileSystem").
PlusHeapAllocationRef(?alloc, "java.io.Win32FileSystem.list/new java.lang.String[]", "java.lang.String[]").
PlusHeapAllocationRef(?alloc, "java.io.Win32FileSystem.list/new java.lang.String", "java.lang.String").

SimulateNativeAllocation(
  "<java.io.FileSystem: java.io.FileSystem getFileSystem()>",
  "java.io.FileSystem.getFileSystem/new java.io.WinNTFileSystem",
  "<java.io.WinNTFileSystem: void <init>()>").

SimulateNativeStringArrayAllocation(
  "<java.io.WinNTFileSystem: java.lang.String[] list(java.io.File)>",
  "java.io.WinNTFileSystem.list/new java.lang.String[]",
  "java.io.WinNTFileSystem.list/new java.lang.String",
  "java.lang.String").
#endif
#endif

/**********************************************************************************
 *
 * java.lang.ref.Finalizer
 *
 **********************************************************************************/

/**
 * Indirect invocations of finalize methods from java.lang.ref.Finalizer.
 *
 * Object.finalize is a protected method, so it cannot be directly
 * invoked.  Finalizer uses an indirection via native code to
 * circumvent this.
 */
SimulateNativeStaticToVirtual(
  "<java.lang.ref.Finalizer: void invokeFinalizeMethod(java.lang.Object)>",
  "<java.lang.Object: void finalize()>").

/**********************************************************************************
 *
 * java.security.AccessController
 *
 **********************************************************************************/

/**
 * The run methods of privileged actions are invoked through the
 * AccessController.doPrivileged method. This introduces an
 * indirection via native code that needs to be simulated in a pointer
 * analysis.
 *
 * Call from an invocation of doPrivileged to an implementation of the
 * PrivilegedAction.run method that will be indirectly invoked.
 *
 * The first parameter of a doPrivileged invocation (a
 * PrivilegedAction) is assigned to the 'this' variable of 'run()'
 * method invocation.
 *
 * The return variable of the 'run()' method of a privileged action is
 * assigned to the return result of the doPrivileged method
 * invocation.
 *
 * TODO for PrivilegedExceptionAction, catch exceptions and wrap them in a PriviligedActionException.
 */
SimulateNativeStaticToVirtual(
  "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>",
  "<java.security.PrivilegedAction: java.lang.Object run()>").

SimulateNativeStaticToVirtual(
  "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>",
  "<java.security.PrivilegedAction: java.lang.Object run()>").

SimulateNativeStaticToVirtual(
  "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>",
  "<java.security.PrivilegedExceptionAction: java.lang.Object run()>").

SimulateNativeStaticToVirtual(
  "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>",
  "<java.security.PrivilegedExceptionAction: java.lang.Object run()>").
