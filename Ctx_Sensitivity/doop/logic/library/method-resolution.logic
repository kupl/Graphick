/**
 * Virtual method resolution
 *
 * TODO Test for accessibility.
 */
MethodLookup[?simplename, ?descriptor, ?type] = ?method ->
  Type(?type),
  SimpleNameRef(?simplename),
  MethodDescriptorRef(?descriptor),
  MethodSignatureRef(?method).

MethodLookup[?simplename, ?descriptor, ?type] = ?method <-
  MethodImplemented[?simplename, ?descriptor, ?type] = ?method.

MethodLookup[?simplename, ?descriptor, ?type] = ?method <-
  DirectSuperclass[?type] = ?supertype,
  MethodLookup[?simplename, ?descriptor, ?supertype] = ?method,
  !(MethodImplemented[?simplename, ?descriptor, ?type]=_).

/**
 * Arrays
 *
 * TODO MethodLookup of clone in an array type now results in
 *      Object.clone. This is not according to the spec, but in the
 *      Sun JVM arrays don't have a declared clone method either. The
 *      bytecode does indicate a call to clone in the array class, but
 *      the Jimple code turns this into a call of
 *      java.lang.Object.clone()
 *
 * TODO Alternative, better implementation: just make java.lang.Object
 *      a direct superclass of array types, something we should do
 *      anyway.
 */
MethodLookup[?simplename, ?descriptor, ?arraytype] = ?method <-
  ArrayType(?arraytype),
  Type:Value(?object:"java.lang.Object"),
  MethodImplemented[?simplename, ?descriptor, ?object] = ?method.

/**
 * Is there a non-abstract method declaration?
 */
MethodImplemented[?simplename, ?descriptor, ?type] = ?method ->
  Type(?type),
  SimpleNameRef(?simplename),
  MethodDescriptorRef(?descriptor),
  MethodSignatureRef(?method).

MethodImplemented[?simplename, ?descriptor, ?type] = ?method <-
  MethodSignature:Type[?signature] = ?type,
  MethodSignature:SimpleName[?signature] = ?simplename,
  MethodSignature:Descriptor[?signature] = ?descriptor,
  MethodDeclaration[?signature] = ?method,
  ModifierRef:Value(?abstract:"abstract"),
  ! MethodModifier(?abstract, ?method).
