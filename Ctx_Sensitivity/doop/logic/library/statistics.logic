/****************************************************************
 * Heaps
 ***************************************************************/

Stats:ReflectiveHeap(?heap) <- ReflectiveHeapAllocation[_, _] = ?heap.
Stats:ApplicationHeap(?heap) <- AssignNormalHeapAllocation(?heap, _, ?method), Stats:Simple:ApplicationMethod(?method).
Stats:ApplicationHeap(?heap) <- AssignContextInsensitiveHeapAllocation(?heap, _, ?method), Stats:Simple:ApplicationMethod(?method).
Stats:ApplicationHeap(?heap) <- ReflectiveHeapAllocation[?instr, _] = ?heap, Instruction:Method[?instr] = ?method, Stats:Simple:ApplicationMethod(?method).
/*
Stats:ReachableHeap(?heap),
Stats:ReachableHeapWithContext(?hctx, ?heap) <- VarPointsTo(?hctx, ?heap, _, _).
*/

/*
Stats:InsensHeapsOnMethodBoundaries(?heap, ?var),
Stats:HeapsOnMethodBoundaries(?hctx, ?heap, ?ctx, ?var) <-
	VarPointsTo(?hctx, ?heap, ?ctx, ?var), Var:DeclaringMethod(?var, ?method),
	(FormalParam[_, ?method] = ?var ; ReturnVar(?var, ?method)).

Stats:ThrowablesInMethod(?heaptype, ?method),
Stats:InsensThrowableHeapsOnMethodBoundaries(?heap, ?var),
Stats:ThrowableHeapsOnMethodBoundaries(?hctx, ?heap, ?ctx, ?var) <-
	Stats:HeapsOnMethodBoundaries(?hctx, ?heap, ?ctx, ?var), HeapAllocation:Type[?heap] = ?heaptype,
	Type:Value(?throw:"java.lang.Throwable"), AssignCompatible(?throw, ?heaptype), Var:DeclaringMethod(?var, ?method).

Stats:InsensAppThrowableHeapsOnMethodBoundaries(?heap, ?var),
Stats:AppThrowableHeapsOnMethodBoundaries(?hctx, ?heap, ?ctx, ?var) <-
	Stats:ThrowableHeapsOnMethodBoundaries(?hctx, ?heap, ?ctx, ?var),
	HeapAllocation:Type[?heap] = ?heaptype, ApplicationClass(?heaptype).

Stats:ThrowablesInAppMethod(?heaptype, ?method),
Stats:InsensAppMethThrowableHeapsOnMethodBoundaries(?heap, ?var),
Stats:AppMethThrowableHeapsOnMethodBoundaries(?hctx, ?heap, ?ctx, ?var) <-
	Stats:ThrowableHeapsOnMethodBoundaries(?hctx, ?heap, ?ctx, ?var), HeapAllocation:Type[?heap] = ?heaptype,
	Var:DeclaringMethod(?var, ?method), Stats:Simple:ApplicationMethod(?method).
*/

/****************************************************************
 * Vars
 ***************************************************************/

// Count how many objects, a var points to (context-sensitive)
Stats:VarCount[?ctx, ?var] = ?n <- agg<<?n = count()>> VarPointsTo(_, _, ?ctx, ?var).

// Count how many objects, a var points to (heap context-insensitive)
Stats:InsensHeapVarPointsTo(?heap, ?ctx, ?var) <- VarPointsTo(_, ?heap, ?ctx, ?var).
Stats:InsensHeapVarCount[?ctx, ?var] = ?n <- agg<<?n = count()>> Stats:InsensHeapVarPointsTo(_, ?ctx, ?var).

// Count how many objects, a var points to (base context-insensitive)
Stats:InsensBaseVarPointsTo(?hctx, ?heap, ?var) <- VarPointsTo(?hctx, ?heap, _, ?var).
Stats:InsensBaseVarCount[?var] = ?n <- agg<<?n = count()>> Stats:InsensBaseVarPointsTo(_, _, ?var).

// Count how many objects, a var points to (heap+base context-insensitive)
Stats:InsensVarCount[?var] = ?n <- agg<<?n = count()>> Stats:Simple:InsensVarPointsTo(_, ?var).

// NOTE: The same applies for Stats:InsensHeapVarCount
Stats:Vars[] = ?n <- agg<<?n = count()>> Stats:VarCount[_, _] = _.
// NOTE: The same applies for Stats:InsensBaseVarCount
Stats:InsensVars[] = ?n <- agg<<?n = count()>> Stats:InsensVarCount[_] = _.

/*
Stats:InsensVarPointsToNonThrowable(?heap, ?var),
Stats:VarPointsToNonThrowable(?hctx, ?heap, ?ctx, ?var) <-
	VarPointsTo(?hctx, ?heap, ?ctx, ?var), HeapAllocation:Type[?heap] = ?heaptype,
	Type:Value(?throw:"java.lang.Throwable"), !AssignCompatible(?throw, ?heaptype).
*/

/****************************************************************
 * Arrays
 ***************************************************************/

// Count how many objects, an array points to (context-sensitive)
Stats:ArrayCount[?basehctx, ?baseheap] = ?n <-
	agg<<?n = count()>> ArrayIndexPointsTo(_, _, ?basehctx, ?baseheap).

// Count how many objects, an array points to (heap context-insensitive)
Stats:InsensHeapArrayIndexPointsTo(?heap, ?basehctx, ?baseheap) <-
	ArrayIndexPointsTo(_, ?heap, ?basehctx, ?baseheap).
Stats:InsensHeapArrayCount[?basehctx, ?baseheap] = ?n <-
	agg<<?n = count()>> Stats:InsensHeapArrayIndexPointsTo(_, ?basehctx, ?baseheap).

// Count how many objects, an array points to (baseheap context-insensitive)
Stats:InsensBaseHeapArrayIndexPointsTo(?hctx, ?heap, ?baseheap) <-
	ArrayIndexPointsTo(?hctx, ?heap, _, ?baseheap).
Stats:InsensBaseHeapArrayCount[?baseheap] = ?n <-
	agg<<?n = count()>> Stats:InsensBaseHeapArrayIndexPointsTo(_, _, ?baseheap).

// Count how many objects, an array points to (heap+baseheap context-insensitive)
Stats:InsensArrayCount[?baseheap] = ?n <-
	agg<<?n = count()>> Stats:Simple:InsensArrayIndexPointsTo(_, ?baseheap).

// NOTE: The same applies for Stats:InsensHeapArrayCount
Stats:Arrays[] = ?n <- agg<<?n = count()>> Stats:ArrayCount[_, _] = _.
// NOTE: The same applies for Stats:InsensBaseHeapArrayCount
Stats:InsensArrays[] = ?n <- agg<<?n = count()>> Stats:InsensArrayCount[_] = _.

/****************************************************************
 * Fields
 ***************************************************************/

// Count how many objects, a field points to (context-sensitive)
Stats:FieldCount[?sig, ?basehctx, ?baseheap] = ?n <-
	agg<<?n = count()>> InstanceFieldPointsTo(_, _, ?sig, ?basehctx, ?baseheap).

// Count how many objects, a field points to (heap context-insensitive)
Stats:InsensHeapInstanceFieldPointsTo(?heap, ?sig, ?basehctx, ?baseheap) <-
	InstanceFieldPointsTo(_, ?heap, ?sig, ?basehctx, ?baseheap).
Stats:InsensHeapFieldCount[?sig, ?basehctx, ?baseheap] = ?n <-
	agg<<?n = count()>> Stats:InsensHeapInstanceFieldPointsTo(_, ?sig, ?basehctx, ?baseheap).

// Count how many objects, a field points to (baseheap context-insensitive)
Stats:InsensBaseHeapInstanceFieldPointsTo(?hctx, ?heap, ?sig, ?baseheap) <-
	InstanceFieldPointsTo(?hctx, ?heap, ?sig, _, ?baseheap).
Stats:InsensBaseHeapFieldCount[?sig, ?baseheap] = ?n <-
	agg<<?n = count()>> Stats:InsensBaseHeapInstanceFieldPointsTo(_, _, ?sig, ?baseheap).

// Count how many objects, a field points to (heap+baseheap context-insensitive)
Stats:InsensFieldCount[?sig, ?baseheap] = ?n <-
	agg<<?n = count()>> Stats:Simple:InsensInstanceFieldPointsTo(_, ?sig, ?baseheap).

// NOTE: The same applies for Stats:InsensHeapFieldCount
Stats:Fields[] = ?n <- agg<<?n = count()>> Stats:FieldCount[_, _, _] = _.
// NOTE: The same applies for Stats:InsensBaseFieldCount
Stats:InsensFields[] = ?n <- agg<<?n = count()>> Stats:InsensFieldCount[_, _] = _.

/*
Stats:InsensInstanceFieldPointsToNonThrowable(?heap, ?sig, ?baseheap),
Stats:InstanceFieldPointsToNonThrowable(?hctx, ?heap, ?sig, ?basehctx, ?baseheap) <-
	InstanceFieldPointsTo(?hctx, ?heap, ?sig, ?basehctx, ?baseheap), HeapAllocation:Type[?heap] = ?heaptype,
	Type:Value(?throw:"java.lang.Throwable"), !AssignCompatible(?throw, ?heaptype).
Stats:InsensInstanceFieldPointsToNonThrowable2(?heap, ?sig, ?baseheap),
Stats:InstanceFieldPointsToNonThrowable2(?hctx, ?heap, ?sig, ?basehctx, ?baseheap) <-
	InstanceFieldPointsTo(?hctx, ?heap, ?sig, ?basehctx, ?baseheap), HeapAllocation:Type[?baseheap] = ?heaptype,
	Type:Value(?throw:"java.lang.Throwable"), !AssignCompatible(?throw, ?heaptype).
Stats:InsensInstanceFieldPointsToNonThrowable3(?heap, ?sig, ?baseheap),
Stats:InstanceFieldPointsToNonThrowable3(?hctx, ?heap, ?sig, ?basehctx, ?baseheap) <-
	InstanceFieldPointsTo(?hctx, ?heap, ?sig, ?basehctx, ?baseheap), HeapAllocation:Type[?heap] = ?heaptype, HeapAllocation:Type[?baseheap] = ?baseheaptype,
	Type:Value(?throw:"java.lang.Throwable"), !AssignCompatible(?throw, ?heaptype), !AssignCompatible(?throw, ?baseheaptype).
*/

/***************************************************
 * Methods
 ***************************************************/

// Count how many contexts, a reachable method appears with
Stats:MethodContextCount[?method] = ?n <- agg<<?n = count()>> ReachableContext(_, ?method).

Stats:Methods[] = ?n <- agg<<?n = count()>> Reachable(_).

/*
// Count how many local vars, a reachable method has
Stats:InsensVarInReachableMethod(?var, ?method),
Stats:VarInReachableMethod(?var, ?ctx, ?method) <-
	Var:DeclaringMethod(?var, ?method), ReachableContext(?ctx, ?method).

Stats:MethodVarCount[?ctx, ?method] = ?n <-
	agg<<?n = count()>> Stats:VarInReachableMethod(_, ?ctx, ?method).
Stats:InsensMethodVarCount[?method] = ?n <-
	agg<<?n = count()>> Stats:InsensVarInReachableMethod(_, ?method).

Stats:MethodsWithVars[] = ?n <- agg<<?n = count()>> Stats:MethodVarCount[_, _] = _.
Stats:InsensMethodsWithVars[] = ?n <- agg<<?n = count()>> Stats:InsensMethodVarCount[_] = _.

Stats:ReachableNativeMethod(?method) -> MethodSignatureRef(?method).
Stats:ReachableNativeMethod(?method) <-
	Reachable(?method),
	MethodModifier(?native, ?method),
	ModifierRef:Value(?native:"native").
*/

/****************************************************************
 * Dominance
 ***************************************************************/

/*
Stats:Dominance:VarPointsTo:Var[?var] = ?count -> VarRef(?var), int[64](?count).
Stats:Dominance:VarPointsTo:Var[?var] = count <-
	agg<<count = count()>>(VarPointsTo(_, _, _, ?var)).

Stats:Dominance:VarPointsTo:AllocationSite[?alloc] = ?count -> HeapAllocationRef(?alloc), int[64](?count).
Stats:Dominance:VarPointsTo:AllocationSite[?alloc] = count <-
	agg<<count = count()>>(VarPointsTo(_, ?alloc, _, _)).

Stats:Dominance:VarPointsTo:Object[?hctx, ?heap] = ?count ->
	HContext(?hctx), HeapAllocationRef(?heap), int[64](?count).
Stats:Dominance:VarPointsTo:Object[?hctx, ?heap] = count <-
	agg<<count = count()>>(VarPointsTo(?hctx, ?heap, _, _)).

Stats:Dominance:VarPointsTo:Method[?method] = ?count -> MethodSignatureRef(?method), int[64](?count).
Stats:Dominance:VarPointsTo:Method[?method] = count <-
	agg<<count = total(varCount)>>(
	Reachable(?method),
	Var:DeclaringMethod(?var, ?method),
	Stats:Dominance:VarPointsTo:Var[?var] = varCount).

#if !defined FIELD_BASED_STATIC && !defined FIELD_BASED_DYNAMIC 
Stats:Dominance:InstanceFieldPointsTo:Signature[?sig] = ?count -> FieldSignatureRef(?sig), int[64](?count).
Stats:Dominance:InstanceFieldPointsTo:Signature[?sig] = count <-
	agg<<count = count()>>(InstanceFieldPointsTo(_, _, ?sig, _, _)).

Stats:Dominance:InstanceFieldPointsTo:BaseAllocationSite[?alloc] = ?count -> HeapAllocationRef(?alloc), int[64](?count).
Stats:Dominance:InstanceFieldPointsTo:BaseAllocationSite[?alloc] = count <-
	agg<<count = count()>>(InstanceFieldPointsTo(_, _, _, _, ?alloc)).

Stats:Dominance:InstanceFieldPointsTo:BaseObject[?hctx, ?heap] = ?count ->
	HContext(?hctx), HeapAllocationRef(?heap), int[64](?count).
Stats:Dominance:InstanceFieldPointsTo:BaseObject[?hctx, ?heap] = count <-
	agg<<count = count()>>(InstanceFieldPointsTo(_, _, _, ?hctx, ?heap)).

Stats:Dominance:InstanceFieldPointsTo:ValueAllocationSite[?alloc] = ?count -> HeapAllocationRef(?alloc), int[64](?count).
Stats:Dominance:InstanceFieldPointsTo:ValueAllocationSite[?alloc] = count <-
	agg<<count = count()>>(InstanceFieldPointsTo(_, ?alloc, _, _, _)).

Stats:Dominance:InstanceFieldPointsTo:ValueObject[?hctx, ?heap] = ?count ->
	HContext(?hctx), HeapAllocationRef(?heap), int[64](?count).
Stats:Dominance:InstanceFieldPointsTo:ValueObject[?hctx, ?heap] = count <-
	agg<<count = count()>>(InstanceFieldPointsTo(?hctx, ?heap, _, _, _).
#endif
*/

/***************************************************
 * Call graph edges
 ***************************************************/

/*
Stats:InsensCallGraphEdgesFromSize[?from] = ?size -> CallGraphEdgeSourceRef(?from), int[64](?size).
Stats:InsensCallGraphEdgesFromSize[?from] = size <-
	agg<<size = count()>>(Stats:Simple:InsensCallGraphEdge(?from, _)).

Stats:InsensCallGraphEdgesToSize[?to] = ?size -> MethodSignatureRef(?to), int[64](?size).
Stats:InsensCallGraphEdgesToSize[?to] = size <-
	agg<<size = count()>>(Stats:Simple:InsensCallGraphEdge(_, ?to)).
*/

/***************************************************
 * Exceptions
 ***************************************************/

Stats:InsensHeapThrowPointsTo(?heap, ?ctx, ?method) ->
	HeapAllocationRef(?heap), Context(?ctx), MethodSignatureRef(?method).

/*
Stats:InsensHeapThrowPointsToSize[?ctx, ?method] = ?size ->
	Context(?ctx), MethodSignatureRef(?method), int[64](?size).

Stats:InsensHeapThrowPointsToSize[?ctx, ?method] = size <-
	agg<<size = count()>>(Stats:InsensHeapThrowPointsTo(_, ?ctx, ?method)).
*/

Stats:InsensHeapThrowPointsTo(?heap, ?ctx, ?method) <-
	ThrowPointsTo(_, ?heap, ?ctx, ?method).

Stats:InsensThrowPointsTo(?heap, ?method) ->
	HeapAllocationRef(?heap), MethodSignatureRef(?method).

/*
Stats:InsensThrowPointsToSize[?method] = ?size ->
	MethodSignatureRef(?method), int[64](?size).

Stats:InsensThrowPointsToSize[?method] = size <-
	agg<<size = count()>>(Stats:InsensThrowPointsTo(_, ?method)).
*/

Stats:InsensThrowPointsTo(?heap, ?method) <-
	Stats:InsensHeapThrowPointsTo(?heap, _, ?method).

/*
Stats:ReachableExceptionHandler(?handler) -> ExceptionHandlerRef(?handler).
Stats:ReachableExceptionHandler(?handler) <-
	Reachable(?method),
	ExceptionHandler:Method(?handler, ?method).

Stats:ReachableThrow(?ref) -> ThrowRef(?ref).
Stats:ReachableThrow(?ref) <-
	Reachable(?method),
	Instruction:Method[?ref] = ?method,
	ThrowRef(?ref).
*/


/*
// Count how many objects, a method may throw (context-sensitive)
Stats:ThrowsPerMethodCount[?ctx, ?method] = ?n <- agg<<?n = count()>> ThrowPointsTo(_, _, ?ctx, ?method).

// Count how many objects, a method may throw (heap context-insensitive)
Stats:InsensHeapThrowsPerMethodCount[?ctx, ?method] = ?n <-
	agg<<?n = count()>> Stats:InsensHeapThrowPointsTo(_, ?ctx, ?method).

// Count how many objects, a method may throw (method context-insensitive)
Stats:InsensMethodThrowPointsTo(?hctx, ?heap, ?method) <- ThrowPointsTo(?hctx, ?heap, _, ?method).
Stats:InsensMethodThrowsPerMethodCount[?method] = ?n <-
	agg<<?n = count()>> Stats:InsensMethodThrowPointsTo(_, _, ?method).

// Count how many objects, a method may throw (heap+method context-insensitive)
Stats:InsensThrowsPerMethodCount[?method] = ?n <-
	agg<<?n = count()>> Stats:InsensThrowPointsTo(_, ?method).

// NOTE: The same applies for Stats:InsensHeapThrowsPerMethodCount
Stats:ThrowMethods[] = ?n <- agg<<?n = count()>> Stats:ThrowsPerMethodCount[_, _] = _.
// NOTE: The same applies for Stats:InsensMethodThrowsPerMethodCount
Stats:InsensThrowMethods[] = ?n <- agg<<?n = count()>> Stats:InsensThrowsPerMethodCount[_] = _.
*/

/***************************************************
 * Prepare sorting of predicates
 ***************************************************/

/*
VarsRank(?r), VarsRank:Value(?r:?n) -> uint[32](?n).
lang:physical:capacity[`VarsRank] = 8388608.
VarsRankNr(?r) <- uint32:range(1, Stats:Vars[], 1, ?r).
+VarsRank(?r) <- +VarsRankNr(?r).

InsensVarsRank(?r), InsensVarsRank:Value(?r:?n) -> uint[32](?n).
lang:physical:capacity[`InsensVarsRank] = 8388608.
InsensVarsRankNr(?r) <- uint32:range(1, Stats:InsensVars[], 1, ?r).
+InsensVarsRank(?r) <- +InsensVarsRankNr(?r).

ArraysRank(?r), ArraysRank:Value(?r:?n) -> uint[32](?n).
lang:physical:capacity[`ArraysRank] = 8388608.
ArraysRankNr(?r) <- uint32:range(1, Stats:Arrays[], 1, ?r).
+ArraysRank(?r) <- +ArraysRankNr(?r).

InsensArraysRank(?r), InsensArraysRank:Value(?r:?n) -> uint[32](?n).
lang:physical:capacity[`InsensArraysRank] = 8388608.
InsensArraysRankNr(?r) <- uint32:range(1, Stats:InsensArrays[], 1, ?r).
+InsensArraysRank(?r) <- +InsensArraysRankNr(?r).

FieldsRank(?r), FieldsRank:Value(?r:?n) -> uint[32](?n).
lang:physical:capacity[`FieldsRank] = 8388608.
FieldsRankNr(?r) <- uint32:range(1, Stats:Fields[], 1, ?r).
+FieldsRank(?r) <- +FieldsRankNr(?r).

InsensFieldsRank(?r), InsensFieldsRank:Value(?r:?n) -> uint[32](?n).
lang:physical:capacity[`InsensFieldsRank] = 8388608.
InsensFieldsRankNr(?r) <- uint32:range(1, Stats:InsensFields[], 1, ?r).
+InsensFieldsRank(?r) <- +InsensFieldsRankNr(?r).

ThrowsRank(?r), ThrowsRank:Value(?r:?n) -> uint[32](?n).
lang:physical:capacity[`ThrowsRank] = 8388608.
ThrowsRankNr(?r) <- uint32:range(1, Stats:ThrowMethods[], 1, ?r).
+ThrowsRank(?r) <- +ThrowsRankNr(?r).

MethodsRank(?r), MethodsRank:Value(?r:?n) -> uint[32](?n).
lang:physical:capacity[`MethodsRank] = 8388608.
MethodsRankNr(?r) <- uint32:range(1, Stats:Methods[], 1, ?r).
+MethodsRank(?r) <- +MethodsRankNr(?r).

MethodVarsRank(?r), MethodVarsRank:Value(?r:?n) -> uint[32](?n).
lang:physical:capacity[`MethodVarsRank] = 8388608.
MethodVarsRankNr(?r) <- uint32:range(1, Stats:MethodsWithVars[], 1, ?r).
+MethodVarsRank(?r) <- +MethodVarsRankNr(?r).

InsensMethodVarsRank(?r), InsensMethodVarsRank:Value(?r:?n) -> uint[32](?n).
lang:physical:capacity[`InsensMethodVarsRank] = 8388608.
InsensMethodVarsRankNr(?r) <- uint32:range(1, Stats:InsensMethodsWithVars[], 1, ?r).
+InsensMethodVarsRank(?r) <- +InsensMethodVarsRankNr(?r).
*/
