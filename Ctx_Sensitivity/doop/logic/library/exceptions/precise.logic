/*****************************************************************************
 *
 * Exceptions
 *
 * TODO Implicitly thrown exceptions are not included (neither are in Paddle)
 *
 * @author Martin Bravenboer
 *
 *****************************************************************************/

/**
 * Represents the heap abstractions of the exceptions a method can
 * throw.
 */
ThrowPointsTo(?hctx, ?heap, ?ctx, ?method) ->
  HContext(?hctx), HeapAllocationRef(?heap),
  Context(?ctx), MethodSignatureRef(?method).

/*****************************************************************************
 *
 * Throw statements
 *
 *****************************************************************************/

/**
 * A method throws an exception in a context if there is a throw
 * statement in the method, and the thrown variable points to an
 * object in this context, but this object is not immediately caught
 * by an exception handler (ThrowPointsTo rule).
 *
 * If the object is a caught, then it is assigned to the formal
 * parameter of the exeception handler (VarPointsTo rule).
 */

ThrowPointsTo(?hctx, ?heap, ?ctx, ?method) <-
  Throw(?ref, ?var),
  VarPointsTo(?hctx, ?heap, ?ctx, ?var),
  HeapAllocation:Type[?heap] = ?heaptype,
  !(ExceptionHandler[?heaptype, ?ref]=_),
  Instruction:Method[?ref] = ?method.

VarPointsTo(?hctx, ?heap, ?ctx, ?param) <-
  Throw(?ref, ?var),
  VarPointsTo(?hctx, ?heap, ?ctx, ?var),
  HeapAllocation:Type[?heap] = ?heaptype,
  ExceptionHandler[?heaptype, ?ref] = ?handler,
  ExceptionHandler:FormalParam[?handler] = ?param.

/*****************************************************************************
 *
 * Method invocations
 *
 *****************************************************************************/

/**
 * A method M1 throws an exception in a context if there is a call
 * graph edge from an invocation in M1 to some method M2 and the
 * method M2 throws a an exception for this specific
 * (context-sensitive) call graph edge. Also, the exception should not
 * be caught immediately by an exception handler in M1 (ThrowPointsTo
 * rule).
 *
 * If there is such an exception handler, then the exception object is
 * assigned to the formal parameter of the exception handler
 * (VarPointsTo rule).
 */

ThrowPointsTo(?hctx, ?heap, ?callerCtx, ?callerMethod) <-
  CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod),
  ThrowPointsTo(?hctx, ?heap, ?calleeCtx, ?tomethod),
  HeapAllocation:Type[?heap] = ?heaptype,
  !(ExceptionHandler[?heaptype,?invocation]=_),
  Instruction:Method[?invocation] = ?callerMethod.

VarPointsTo(?hctx, ?heap, ?callerCtx, ?param) <-
  CallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod),
  ThrowPointsTo(?hctx, ?heap, ?calleeCtx, ?tomethod),
  HeapAllocation:Type[?heap] = ?heaptype,
  ExceptionHandler[?heaptype,?invocation] = ?handler,
  ExceptionHandler:FormalParam[?handler] = ?param.


/*****************************************************************************
 *
 * Compute for an instruction which exception handlers handle which
 * exception types.
 *
 ****************************************************************************/

// (REVIEW-Yannis) Note how this logic is superlinear. We keep
// relations that link every exception handler to every relevant (i.e., throw
// or methcall) instruction under its range, and to every type that the
// exception handler can handle, including all subtypes of the declared type.
// It is not easy to change this, nor perhaps too valuable. But it is certainly
// a spot where bottom-up evaluation with an explicit representation hurts us.
// We have very large ExceptionHandler, PossibleExceptionHandler, etc. relations.
// Note: currently exception objects are allocated context-insensitively.
/**
 * An exception of a specific type, thrown at an instruction, is
 * handled by an exception handler.
 */
ExceptionHandler[?type, ?instruction] = ?handler ->
  ExceptionHandlerRef(?handler), Type(?type), InstructionRef(?instruction).

ExceptionHandler[?type, ?instruction] = ?handler <-
  PossibleExceptionHandler(?handler, ?type, ?instruction),
  ! ImpossibleExceptionHandler(?handler, ?type, ?instruction).

/**
 * An exception type that is caught by an earlier exception handler
 * (not ?handler).
 */

ImpossibleExceptionHandler(?handler, ?type, ?instruction) ->
  ExceptionHandlerRef(?handler), Type(?type), InstructionRef(?instruction).

ImpossibleExceptionHandler(?handler, ?type, ?instruction) <-
  PossibleExceptionHandler(?handler, ?type, ?instruction),
  ExceptionHandler:Before(?previous, ?handler),
  PossibleExceptionHandler(?previous, ?type, ?instruction).

/**
 * All possible handlers of an exception type for an instruction.
 */
PossibleExceptionHandler(?handler, ?type, ?instruction) ->
  ExceptionHandlerRef(?handler),
  Type(?type),
  InstructionRef(?instruction).

PossibleExceptionHandler(?handler, ?type, ?instruction) <-
  ExceptionHandler:InRange(?handler, ?instruction),
  ExceptionHandler:Type[?handler] = ?type.

PossibleExceptionHandler(?handler, ?subtype, ?instruction) <-
  ExceptionHandler:InRange(?handler, ?instruction),
  ExceptionHandler:Type[?handler] = ?type,
  Superclass(?subtype, ?type).
  
/**
 * Instructions that are in the range of an exception handler.
 */
ExceptionHandler:InRange(?handler, ?instruction) ->
  ExceptionHandlerRef(?handler),
  InstructionRef(?instruction).

ExceptionHandler:InRange(?handler, ?instruction) <-
  Instruction:Method[?instruction] = ?method,
  ExceptionHandler:Method(?handler, ?method),
  Instruction:Index[?instruction] = ?index,
  ExceptionHandler:Begin[?handler] = ?begin,
  ?begin <= ?index,
  ExceptionHandler:End[?handler] = ?end,
  ?index < ?end.

/**
 * Transitive closure of ExceptionHandler:Previous.
 */
ExceptionHandler:Before(?before, ?handler) ->
  ExceptionHandlerRef(?before),
  ExceptionHandlerRef(?handler).

ExceptionHandler:Before(?previous, ?handler) <-
  ExceptionHandler:Previous[?handler] = ?previous.

ExceptionHandler:Before(?before, ?handler) <-
  ExceptionHandler:Before(?middle, ?handler),
  ExceptionHandler:Previous[?middle] = ?before.

InRangeOfExceptionHandler(?instruction) -> InstructionRef(?instruction).
InRangeOfExceptionHandler(?instruction) <-
  ExceptionHandler:InRange(_, ?instruction).
