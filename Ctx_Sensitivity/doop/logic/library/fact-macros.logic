/**
 * Macros that fix the lack of ref-modes on subtypes in LB
 */

/**
 * HeapAllocationRef cannot have a ref-mode, because it is a subtype
 * of InstructionRef. To more or less hide this, we define a
 * macro that uses the ref-mode (InstructionRef:Value) of the
 * base type and checks if it is a HeapAllocationRef.
 */

#define HeapAllocationValue(x,y) \
  InstructionRef:Value(x:y), \
  HeapAllocationRef(x)

#define StringConstantEntity(x,y) \
  InstructionRef:Value(x:y), \
  StringConstant(x)

#define PlusHeapAllocationRef(x,string,type) \
  +InstructionRef:Value(x:string), \
  +HeapAllocationRef(x), \
  +HeapAllocation:Type[x] = x ## Type, \
  +Type(x ## Type), \
  +Type:Value(x ## Type:type)

#define PlusVarRef(x,method,string,type) \
  +VarRef(x), \
  +VarRef:Value(x:string), \
  +Var:Type[x] = type, \
  +Var:DeclaringMethod(x, method)

#define PlusType(x,string) \
  +Type(x), \
  +Type:Value(x:string)

#define PlusStringConstant(x,string) \
  +InstructionRef:Value(x:string), \
  +StringConstant(x), \
  +HeapAllocation:Type[x] = x ## Type, \
  +Type(x ## Type), \
  +Type:Value(x ## Type:"java.lang.String")

#define PlusClassConstant(x,string) \
  +InstructionRef:Value(x:string), \
  +ClassConstant(x), \
  +HeapAllocation:Type[x] = x ## Type, \
  +Type(x ## Type), \
  +Type:Value(x ## Type:"java.lang.Class")

/**
 * Same for method invocations
 */

#define MethodInvocationValue(x, y) \
  InstructionRef:Value(x:y), \
  MethodInvocationRef(x)

#define PlusMethodInvocationRef(x,string) \
  +InstructionRef:Value(x:string), \
  +MethodInvocationRef(x)


/*
 * Similar for class type
 */

#define ClassTypeValue(x,y) \
  Type:Value(x:y), \
  ClassType(x)
