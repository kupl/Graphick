/**
 * JVM Specification:
 *
 *    * The execution of any one of the Java virtual machine
 *      instructions new, getstatic, putstatic, or invokestatic that
 *      references the class or interface. Each of these instructions
 *      corresponds to one of the conditions in 2.17.4. All of the
 *      previously listed instructions reference a class directly or
 *      indirectly through either a field reference or a method
 *      reference. Upon execution of a new instruction, the referenced
 *      class or interface is initialized if it has not been initialized
 *      already. Upon execution of a getstatic, putstatic, or
 *      invokestatic instruction, the class or interface that declared
 *      the resolved field or method is initialized if it has not been
 *      initialized already.
 *
 *    * Invocation of certain reflective methods in the class library,
 *      for example, in class Class or in package java.lang.reflect.
 *
 *    * The initialization of one of its subclasses
 *
 *    * Its designation as the initial class at Java virtual machine
 *      start-up (5.2)
 */
InitializedClass(?classOrInterface) ->
  Type(?classOrInterface).

/**
 * A class is initialized if one of its subclass gets initialized.
 */
InitializedClass(?superclass) <-
   InitializedClass(?classOrInterface),
   DirectSuperclass[?classOrInterface] = ?superclass.

/**
 * Class of main method declaration.
 */
InitializedClass(?class) <-
  MainMethodDeclaration(?method),
  DeclaringClassMethod[?method] = ?class.

/**
 * JLS: T is a class and an instance of T is created.
 *
 * TODO Same join is performed in VarPointsTo. Maybe fold.
 * TODO Consider to add strings?
 */
InitializedClass(?class) <-
  Reachable(?inmethod),
  AssignHeapAllocation(?heap, _, ?inmethod),
  HeapAllocation:Type[?heap] = ?class.

/**
 * JLS: T is a class and a static method declared by T is invoked.
 */
InitializedClass(?class) <-
  Reachable(?inmethod),
  StaticMethodInvocation:In(?invocation, ?inmethod),
  StaticMethodInvocation:Signature[?invocation] = ?signature,
  DeclaringClassMethod[?signature] = ?class.

/**
 * JLS: A static field declared by T is assigned.
 */
InitializedClass(?classOrInterface) <-
  Reachable(?inmethod),
  StoreStaticField(_, ?signature, ?inmethod),
  Field:DeclaringClass[?signature] = ?classOrInterface.

InitializedClass(?classOrInterface) <-
  Reachable(?inmethod),
  StorePrimStaticField(?signature, ?inmethod),
  Field:DeclaringClass[?signature] = ?classOrInterface.

/**
 * JLS: A static field declared by T is used and the field 
 *      is not a constant variable.
 *
 * Check if the field is not constant is not necessary because we
 * analyze bytecode. Nobody
 */
InitializedClass(?classOrInterface) <-
  Reachable(?inmethod),
  LoadStaticField(?signature, _, ?inmethod),
  Field:DeclaringClass[?signature] = ?classOrInterface.

InitializedClass(?classOrInterface) <-
  Reachable(?inmethod),
  LoadPrimStaticField(?signature, ?inmethod),
  Field:DeclaringClass[?signature] = ?classOrInterface.

/**
 * JLS: T is a top-level class, and an assert statement
 *      lexically nested within T is executed. 
 *
 * TODO: no idea how a statement can ever be executed 
 *       in a class that has not been initialized?
 */
