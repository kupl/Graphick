/*************************************************************
 * Implementation of points-to propagation for concrete,
 * non-reflective, operations that have been discovered using
 * reflection.
 *
 * @author Martin Bravenboer
 * @author Yannis Smaragdakis
 *************************************************************/


/*************************************************************
 * Reflective method calls
 *
 * Issues in the documentation:
 *   - Class.getDeclaredMethods does not specify that <init> is not returned.
 *   - Method.invoke does not specify that private method calls do not do method lookup
 *   - It is impossible to call an overridden method in a super class.
 *
 * Issues in Livshits' reflection analysis:
 *   - no dynamic method lookup for instance methods (interface, abstract, overriden)
 *   - no handling of exceptions
 *   - unclear how to make context-sensitive
 *   - not sound for reflective use of reflection
 *   - no handling of boxing/unboxing
 *
 * Test:
 *   - static initialization
 *   - context-sensivitity
 *   - virtual method lookup
 *   - method declared in class of objParam
 *
 * TODO Boxing of primitive results
 *
 *************************************************************/

/**
 * Method invocations resulting from propagating Method and
 * Constructor objects to reflective method invocations.
 *
 * As opposed to method invocations in the input facts, these must be
 * context-sensitive for precision purposes: for a reflective method
 * call sites, the invoked method can depend on the context.
 */
ReflectiveMethodInvocation(?ctx, ?invocation, ?signature) ->
  Context(?ctx), MethodInvocationRef(?invocation),
  MethodSignatureRef(?signature).

/**
 * The base variable of a reflective method call.
 */
ReflectiveBaseVar[?invocation] = ?base ->
  MethodInvocationRef(?invocation),
  VarRef(?base).

/**
 * The return variable of a reflective method call.
 */
ReflectiveAssignReturnValue[?invocation] = ?base ->
  MethodInvocationRef(?invocation),
  VarRef(?base).

/**
 * The variable that points-to an array of actual parameters of a
 * reflective method call.
 */
ReflectiveActualParams[?invocation] = ?actualParams ->
  MethodInvocationRef(?invocation),
  VarRef(?actualParams).

/*************************************************************
 * Specific reflective method invocations
 * 
 * Reflective method invocations need to be specialized to determine
 * what kind of method call this is.
 *
 *************************************************************/

ReflectiveSpecialMethodInvocation(?invocation, ?signature, ?ctx, ?base) ->
  Context(?ctx), MethodInvocationRef(?invocation),
  MethodSignatureRef(?signature), VarRef(?base).

ReflectiveStaticMethodInvocation(?ctx, ?invocation, ?signature) ->
  Context(?ctx), MethodInvocationRef(?invocation),
  MethodSignatureRef(?signature).

ReflectiveVirtualMethodInvocation(?signature, ?invocation, ?ctx, ?base) ->
  Context(?ctx), MethodInvocationRef(?invocation),
  MethodSignatureRef(?signature), VarRef(?base).

/**
 * Private method invocations are special methods, unless they are static.
 *
 * Note that (for now) the other special method invocation cases are
 * not possible: 1) instance initialization methods cannot be invoked
 * reflectively using Method.invoke and 2) overridden superclass
 * methods cannot be invoked through reflection.
 */
ReflectiveSpecialMethodInvocation(?invocation, ?signature, ?ctx, ?base) <-
  ReflectiveMethodInvocation(?ctx, ?invocation, ?signature),
  ModifierRef:Value(?private:"private"),
  MethodModifier(?private, ?signature),
  ModifierRef:Value(?static:"static"),
  ! MethodModifier(?static, ?signature),
  ReflectiveBaseVar[?invocation] = ?base.

/**
 * Static method invocations
 */
ReflectiveStaticMethodInvocation(?ctx, ?invocation, ?signature) <-
  ReflectiveMethodInvocation(?ctx, ?invocation, ?signature),
  ModifierRef:Value(?static:"static"),
  MethodModifier(?static, ?signature).

/**
 * All others are virtual method invocations
 */
ReflectiveVirtualMethodInvocation(?signature, ?invocation, ?ctx, ?base) <-
  ReflectiveMethodInvocation(?ctx, ?invocation, ?signature),
  ModifierRef:Value(?private:"private"),
  ! MethodModifier(?private, ?signature),
  ModifierRef:Value(?static:"static"),
  ! MethodModifier(?static, ?signature),
  ReflectiveBaseVar[?invocation] = ?base.


/*************************************************************
 * Reflective call graph edges
 *
 * TODO Unfortunately we have to redo the implementation of method
 *      calls here. It might be a good idea to consider generation of
 *      method invocations (but those are input predicates).
 *
 *************************************************************/

/**
 * A reflective call graph edge has specific details for propagating
 * parameters and handling return values, so we distinguish them from
 * native and normal call graph edges.
 */
ReflectiveCallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?callee) ->
  Context(?callerCtx), MethodInvocationRef(?invocation),
  Context(?calleeCtx), MethodSignatureRef(?callee).

ReachableContext(?calleeCtx, ?callee) <-
  ReflectiveCallGraphEdge(_, _, ?calleeCtx, ?callee).

#ifndef CONTEXT_SENSITIVE_REFLECTION
// REVIEW (YS): Does this break Paddle compatibility? The code originally
// just used as callee context the calling context of the caller.
DummyContextForReflective[] = ?dummyCtx -> Context(?dummyCtx).

// Using the main method's (unique) context as a dummy context.
DummyContextForReflective[] = ?dummyCtx <-
  MainMethodDeclaration(?mainMethod),
  ReachableContext(?dummyCtx, ?mainMethod).
#endif

/**
 * Static methods
 */
#ifdef CONTEXT_SENSITIVE_REFLECTION
// REVIEW (YS): Could add back the refinement functionality, but given the
// (currently) marginal value of both context-sensitive reflection and 
// refinement-based analyses, it just isn't worth the trouble.
ReflectiveMergeStaticMacro(?callerCtx, ?invocation, ?calleeCtx),
ReflectiveCallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?callee) <-
  ReflectiveStaticMethodInvocation(?callerCtx, ?invocation, ?callee).
#else
ReflectiveCallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?callee) <-
  DummyContextForReflective[] = ?calleeCtx,
  ReflectiveStaticMethodInvocation(?callerCtx, ?invocation, ?callee).
#endif

/**
 * Special methods
 *
 * TODO Check if object is an instance of the class declaring the
 *      method (only overapproximation)
 */
#ifdef CONTEXT_SENSITIVE_REFLECTION
ReflectiveMergeMacro(?callerCtx, ?invocation, ?hctx, ?heap, ?calleeCtx),
ReflectiveCallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?callee),
VarPointsTo(?hctx, ?heap, ?calleeCtx, ?this)
  <-
  VarPointsTo(?hctx, ?heap,  ?callerCtx, ?base), // recursive
  ReflectiveSpecialMethodInvocation(?invocation, ?callee, ?callerCtx, ?base),  // recursive
  ThisVar[?callee] = ?this,
  AssignCompatible(Var:Type[?this], HeapAllocation:Type[?heap]).
#else
ReflectiveCallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?callee),
VarPointsTo(?hctx, ?heap, ?calleeCtx, ?this)
  <-
  DummyContextForReflective[] = ?calleeCtx,
  VarPointsTo(?hctx, ?heap,  ?callerCtx, ?base), // recursive
  ReflectiveSpecialMethodInvocation(?invocation, ?callee, ?callerCtx, ?base),  // recursive
  ThisVar[?callee] = ?this,
  AssignCompatible(Var:Type[?this], HeapAllocation:Type[?heap]).
#endif

//// (REVIEW--YS) It's a special method. Should they be identical types?
//// Probably not. Can use special reflective calls to call private
//// superclass methods.
//  Var:Type[?this] = HeapAllocation:Type[?heap].
//// Experiments show it makes the tiniest difference only.

/**
 * Virtual methods
 *
 * TODO Check if object is an instance of the class declaring the
 *      method (only overapproximation)
 */


#ifdef CONTEXT_SENSITIVE_REFLECTION
ReflectiveMergeMacro(?callerCtx, ?invocation, ?hctx, ?heap, ?calleeCtx),
ReflectiveCallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod),
VarPointsTo(?hctx, ?heap, ?calleeCtx, ?this)
  <-
  VarPointsTo(?hctx, ?heap, ?callerCtx, ?base), // recursive
  ReflectiveVirtualMethodInvocation(?signature, ?invocation, ?callerCtx, ?base),  // recursive
  HeapAllocation:Type[?heap] = ?heaptype,
  MethodSignature:Type[?signature] = ?type,
  AssignCompatible(?type, ?heaptype), // TODO need nicer check
  MethodSignature:SimpleName[?signature] = ?simplename,
  MethodSignature:Descriptor[?signature] = ?descriptor,
  MethodLookup[?simplename, ?descriptor, ?heaptype] = ?tomethod,
  ThisVar[?tomethod] = ?this.
#else
ReflectiveCallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?tomethod),
VarPointsTo(?hctx, ?heap, ?calleeCtx, ?this)
  <-
  DummyContextForReflective[] = ?calleeCtx,
  VarPointsTo(?hctx, ?heap, ?callerCtx, ?base), // recursive
  ReflectiveVirtualMethodInvocation(?signature, ?invocation, ?callerCtx, ?base),  // recursive
  HeapAllocation:Type[?heap] = ?heaptype,
  MethodSignature:Type[?signature] = ?type,
  AssignCompatible(?type, ?heaptype), // TODO need nicer check
  MethodSignature:SimpleName[?signature] = ?simplename,
  MethodSignature:Descriptor[?signature] = ?descriptor,
  MethodLookup[?simplename, ?descriptor, ?heaptype] = ?tomethod,
  ThisVar[?tomethod] = ?this.
#endif


/**
 * Return values of reflective method invocations
 */
Assign(?type, ?callerCtx, ?local, ?calleeCtx, ?return) <-
  ReturnVar(?return, ?callee),
  ReflectiveCallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?callee),
  ReflectiveAssignReturnValue[?invocation] = ?local,
  Var:Type[?local] = ?type.

ReflectiveLoadArrayIndex(?calleeCtx, ?formal, ?callerCtx, ?actual) <-
  ReflectiveCallGraphEdge(?callerCtx, ?invocation, ?calleeCtx, ?callee),
  FormalParam[_, ?callee] = ?formal,
  ReflectiveActualParams[?invocation] = ?actual.

/*************************************************************
 *
 * Reflective heap allocations
 *
 *************************************************************/

// Basically this is only used for special methods and it has very
// clever logic: we don't have a receiver var when we are calling
// a constructor reflectively. So, instead, we remember in the
// ReflectiveAssignHeapAllocation predicate the variable that the
// result of the reflective construction will be assigned to! Then
// we pretend the reflectively allocated object is already assigned
// to that local variable and use that local variable to initialize
// the "this" var of the constructor, as if this local variable (to
// which the object will be assigned after it is constructed) is the
// receiver object. It took me hours to thorougly convince myself this
// works. (YS)

ReflectiveAssignHeapAllocation(?instruction, ?type, ?ctx, ?var) ->
  Context(?ctx), VarRef(?var), Type(?type), InstructionRef(?instruction).

#ifdef CONTEXT_SENSITIVE_REFLECTION
ReflectiveRecordMacro(?ctx, ?heap, ?hctx),
InitializedClass(?type),
VarPointsTo(?hctx, ?heap, ?ctx, ?var) <-
  ReflectiveAssignHeapAllocation(?instruction, ?type, ?ctx, ?var), // recursive
  ReflectiveHeapAllocation[?instruction, ?type]  = ?heap.
#else
RecordImmutableMacro(?ctx, ?heap, ?hctx),
InitializedClass(?type),
VarPointsTo(?hctx, ?heap, ?ctx, ?var) <-
  ReflectiveAssignHeapAllocation(?instruction, ?type, ?ctx, ?var), // recursive
  ReflectiveHeapAllocation[?instruction, ?type]  = ?heap.
#endif


//// There are hundreds of thousands of ReflectiveHeapAllocation facts typically. 
//// I don't think it *ever* makes sense to treat them context-sensitively.(YS)
//InitializedClass(?type),
//RecordMacro(?ctx, ?heap, ?hctx),
//VarPointsTo(?hctx, ?heap, ?ctx, ?var) <-
//  ReflectiveAssignHeapAllocation(?instruction, ?type, ?ctx, ?var), // recursive
//  ReflectiveHeapAllocation[?instruction, ?type]  = ?heap,
//  ObjectShouldNotBeRefined(?heap).
//
//#ifdef RecordRefinedMacro
//InitializedClass(?type),
//RecordRefinedMacro(?ctx, ?heap, ?hctx),
//VarPointsTo(?hctx, ?heap, ?ctx, ?var) <-
//  ReflectiveAssignHeapAllocation(?instruction, ?type, ?ctx, ?var), // recursive
//  ReflectiveHeapAllocation[?instruction, ?type]  = ?heap,
//  ObjectShouldBeRefined(?heap).
//#endif

/*************************************************************
 *
 * Reflective assignment of class constants
 *
 *************************************************************/

ReflectiveAssignClassConstant(?ctx, ?invocation, ?type) ->
  Context(?ctx), MethodInvocationRef(?invocation), Type(?type).

/**
 * Not every virtual method invocation has a return value, so we need
 * to initialize classes separate from the VarPointsTo rule.
 */
InitializedClass(?type) <-
  ReflectiveAssignClassConstant(_, _, ?type).

/**
 * TODO This doesn't make any sense without a 'to' variable.
 */
RecordImmutableMacro(?ctx, ?heap, ?immCtx),
VarPointsTo(?immCtx, ?heap, ?ctx, ?return) <-
  ReflectiveAssignClassConstant(?ctx, ?invocation, ?type),
  ReifiedClass[?type] = ?heap,
  AssignReturnValue[?invocation] = ?return.

/*************************************************************
 *
 * Reflective load of array index.
 *
 *************************************************************/

ReflectiveLoadArrayIndex(?calleeCtx, ?to, ?callerCtx, ?base) ->
  Context(?calleeCtx), VarRef(?to),
  Context(?callerCtx), VarRef(?base).

/**
 * It's unfortunate this code is so similar to normal LoadArrayIndex.
 * But it's not identical because there are type casts performed silently
 * when the array is just passing arguments to a reflective method call
 */
LoadReflectiveHeapArrayIndex(?calleeCtx, ?to, ?basehctx, ?baseheap) <-
  ReflectiveLoadArrayIndex(?calleeCtx, ?to, ?callerCtx, ?base),
  VarPointsTo(?basehctx, ?baseheap, ?callerCtx, ?base).

VarPointsTo(?hctx, ?heap, ?ctx, ?to) <-
  LoadReflectiveHeapArrayIndex(?ctx, ?to, ?basehctx, ?baseheap),
  ArrayIndexPointsTo(?hctx, ?heap, ?basehctx, ?baseheap),
  Var:Type[?to] = ?type,
  HeapAllocation:Type[?heap] = ?heaptype,
  AssignCompatible(?type, ?heaptype).


/*************************************************************
 *
 * Reflective load of a static field
 *
 * TODO does this trigger class initialization?
 *
 *************************************************************/

ReflectiveLoadStaticField(?ctx, ?var, ?signature) ->
  FieldSignatureRef(?signature), Context(?ctx), VarRef(?var).

VarPointsTo(?hctx, ?heap, ?ctx, ?var) <-
  ReflectiveLoadStaticField(?ctx, ?var, ?signature),
  StaticFieldPointsTo(?hctx, ?heap, ?signature).

/*************************************************************
 *
 * Reflective store of a static field
 *
 * TODO does this trigger class initialization?
 *
 *************************************************************/

ReflectiveStoreStaticField(?signature, ?ctx, ?var) ->
  FieldSignatureRef(?signature), Context(?ctx), VarRef(?var).

StaticFieldPointsTo(?hctx, ?heap, ?signature) <-
  ReflectiveStoreStaticField(?signature, ?ctx, ?var),
  VarPointsTo(?hctx, ?heap, ?ctx, ?var).

/*************************************************************
 *
 * Reflective load of an instance field
 *
 *************************************************************/

ReflectiveLoadInstanceField(?toCtx, ?to, ?signature, ?baseCtx, ?base) ->
  Context(?baseCtx), VarRef(?base), FieldSignatureRef(?signature),
  Context(?toCtx), VarRef(?to).

LoadHeapInstanceField(?toCtx, ?to, ?sig, ?basehctx, ?baseheap) <-
  ReflectiveLoadInstanceField(?toCtx, ?to, ?sig, ?baseCtx, ?base),
  VarPointsTo(?basehctx, ?baseheap, ?baseCtx, ?base).

/*************************************************************
 *
 * Reflective store of an instance field
 *
 *************************************************************/

ReflectiveStoreInstanceField(?fromCtx, ?from, ?signature, ?baseCtx, ?base) ->
  Context(?fromCtx), VarRef(?from), Context(?baseCtx), VarRef(?base),
  FieldSignatureRef(?signature).

StoreHeapInstanceField(?signature, ?basehctx, ?baseheap, ?fromCtx, ?from) <-
  ReflectiveStoreInstanceField(?fromCtx, ?from, ?signature, ?baseCtx, ?base),
  VarPointsTo(?basehctx, ?baseheap, ?baseCtx, ?base).
