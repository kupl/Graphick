#include "../library/fact-macros.logic"

/**
 * Some library modules are generically defined, and need the macro
 * definitions for the context-sensitive pointer analysis they are
 * used in. For a context-insensitive pointer analysis we just 
 * generate constant contexts.
 */

// We need to *pretend* we are creating new contexts, since the
// product of the macro goes to the head of a rule.
#define RecordMacro(ctx, heap, hctx) \
  HContext(hctx), \
  HContextFromRealHContext[] = hctx

#define RecordImmutableMacro(ctx, heap, immCtx) \
  HContext(immCtx), \
  HContextFromRealHContext[] = immCtx


#define MergeMacro(callerCtx, invocation, hctx, heap, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[] = calleeCtx

#define MergeStaticMacro(callerCtx, invocation, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[] = calleeCtx

// MergeThreadStart, MergeStartup, and MergeFinalizerRegisterContext
// have the same logic as plain Merge for this analysis.
#define MergeThreadStartMacro(hctx, heap, callerCtx, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[] = newCtx

#define MergeStartupMacro(hctx, heap, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[] = calleeCtx

#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, heap, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[] = newCtx
