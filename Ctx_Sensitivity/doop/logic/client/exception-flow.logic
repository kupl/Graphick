/**
 * Exception-flow analysis
 *
 * This analysis is based on the idea of exception-catch links (e-c
 * links), introduced by Fu et al. [1,2]. The analysis reports for a
 * throw the exception handlers that can potentially handle exceptions
 * thrown by this throw statement.
 *
 * This analysis needs to be applied with the precise exception
 * analysis of Doop, otherwise it is virtually useless.
 *
 * [1] Chen Fu, Barbara G. Ryder, Ana Milanova, David
 *     G. Wonnacott. Testing of Java Web Services for Robustness, In
 *     Proceedings of the International Symposium on Software Testing
 *     and Analysis (ISSTA 2004), Boston, MA, Jul. 2004
 *
 * [2] Chen Fu, Ana Milanova, Barbara G. Ryder, David
 *     G. Wonnacott. Robustness Testing of Java Server
 *     Applications. IEEE Transactions on Software Engineering, 31(4),
 *     Apr. 2005.
 *
 * @author               Martin Bravenboer
 * @last-major-revision  1/20/2009
 */

/**
 * An exception thrown by throw instruction ?throw might be handled by
 * exception handler ?handler.
 *
 * Notice that this actually supports links between throw and catches
 * that involve a rethrow of the exception.

ExceptionCatchLink(?throw, ?handler) ->
  ThrowRef(?throw),
  ExceptionHandlerRef(?handler).
 */

NativeExceptionCatchLink(?native, ?handler) ->
  MethodSignatureRef(?native),
  ExceptionHandlerRef(?handler).

/**
 * Results restricted to application code.
 */
ExceptionHandlerApplication(?handler) ->
  ExceptionHandlerRef(?handler).

/*
ExceptionCatchLinkApplication(?throw, ?handler) ->
  ThrowRef(?throw),
  ExceptionHandlerRef(?handler).
*/

NativeExceptionCatchLinkApplication(?native, ?handler) ->
  MethodSignatureRef(?native),
  ExceptionHandlerRef(?handler).

/**
 * Throw instruction ?throw may throw abstract exception object ?heap.

Throw:Throws(?throw, HeapAbstraction(?heap)) ->
  ThrowRef(?throw),
  DeclareHeapAbstraction(?heap).
 */

/**
 * Exception handler ?handler may handle abstract exception object ?heap.
 */
ExceptionHandler:Handles(?handler, HeapAbstraction(?heap)) ->
  ExceptionHandlerRef(?handler),
  DeclareHeapAbstraction(?heap).

/**
 * Native method ?method may throw abstract exception object ?heap.
 */
Native:Throws(?method, HeapAbstraction(?heap)) ->
  MethodSignatureRef(?method),
  DeclareHeapAbstraction(?heap).

/**
 * Logic
 */

/*
ExceptionCatchLink(?throw, ?handler) <-
  Throw:Throws(?throw, HeapAbstraction(?heap)),
  ExceptionHandler:Handles(?handler, HeapAbstraction(?heap)).
*/

NativeExceptionCatchLink(?method, ?handler) <-
  Native:Throws(?method, HeapAbstraction(?heap)),
  ExceptionHandler:Handles(?handler, HeapAbstraction(?heap)),
  not ThrowableHandler(?handler).

/*
Throw:Throws(?throw, HeapAbstraction(?heap)) <-
  Throw(?throw, ?var),
  VarPointsTo(HeapAbstraction(?heap), AnyContext(?var)).
*/

ExceptionHandler:Handles(?handler, HeapAbstraction(?heap)) <-
  ExceptionHandler:FormalParam[?handler] = ?param,
  VarPointsTo(HeapAbstraction(?heap), AnyContext(?param)).

/**
 * Useful query for reachable natives throwing IOExceptions
 */
NativeThrowingIOException(?method, ?exceptionType) -> MethodSignatureRef(?method), Type(?exceptionType).
NativeThrowingIOException(?method, ?exceptionType) <-
  Reachable(?method),
  NativeMethod(?method),
  MethodDeclaration:Exception(?exceptionType, ?method),
  Type:Value(?io:"java.io.IOException"),
  AssignCompatible(?io, ?exceptionType).

NativeMethod(?method) -> MethodSignatureRef(?method).
NativeMethod(?method) <-
  MethodModifier(?native, ?method),
  ModifierRef:Value(?native:"native").

/**
 * e-c links restricted to application catch
 */

ExceptionHandlerApplication(?handler) <-
  ApplicationClass(?class),
  DeclaringClassMethod[?method] = ?class,
  ExceptionHandler:Method(?handler, ?method).

/*
ExceptionCatchLinkApplication(?throw, ?handler) <-
  ExceptionCatchLink(?throw, ?handler),
  ExceptionHandlerApplication(?handler).
*/

NativeExceptionCatchLinkApplication(?method, ?handler) <-
  NativeExceptionCatchLink(?method, ?handler),
  ExceptionHandlerApplication(?handler).

/**
 * e-c links restricted to application catch, native method throwing IOException.
 */
NativeIOExceptionCatchLinkApplication(?native, ?handler) ->
  MethodSignatureRef(?native),
  ExceptionHandlerRef(?handler).

NativeIOExceptionCatchLinkApplication(?native, ?handler) <-
  NativeExceptionCatchLinkApplication(?native, ?handler),
  NativeThrowingIOException(?native, _).

/**
 * e-c links restricted to application catch, native throw source selected by Fu et al.
 */
Fu:ExceptionCatchLink(?native, ?handler) ->
  MethodSignatureRef(?native),
  ExceptionHandlerRef(?handler).

Fu:ExceptionCatchLink(?native, ?handler) <-
  NativeExceptionCatchLinkApplication(?native, ?handler),
  Fu:NativeThrowSource(?native),
  not ThrowableHandler(?handler).

ThrowableHandler(?handler) ->
  ExceptionHandlerRef(?handler).

ThrowableHandler(?handler) <-
  Type:Value(?throwable:"java.lang.Throwable"),
  ExceptionHandler:Type[?handler] = ?throwable.

/**
 * Compute all native methods invoked in throw sources as defined by
 * Fu et al. in ISSTA'04.
 */
Fu:NativeThrowSource(?native) -> MethodSignatureRef(?native).

Fu:NativeThrowSource(?native) <-
  Fu:ThrowSource(?inmethod),
  Instruction:Method[?invocation] = ?inmethod,
  CallGraphEdge(AnyContext(?invocation), AnyContext(?native)),
  NativeMethod(?native).

Fu:NativeThrowSource(?native) <-
  CallGraphEdge(AnyContext(_), AnyContext(?native)),
  NativeMethod(?native),
  Fu:ThrowSource(?native).

/**
 * Add native heap allocation for exceptions
 */
#ifdef EXCEPTIONS_PRECISE
ThrowPointsTo(HeapContext(?hctx, ?heap), Context(?ctx, ?nativeMethod)) <-
  NativeMethod(?nativeMethod),
  ReachableContext(Context(?ctx, ?nativeMethod)),
  NativeExceptionHeapAllocation(?heap, ?nativeMethod),
  ObjectShouldNotBeRefined(?heap),
  BindHeapContext(?hctx, ?heap, ?ctx).

#ifdef BindRefinedHeapContext
ThrowPointsTo(HeapContext(?hctx, ?heap), Context(?ctx, ?nativeMethod)) <-
  NativeMethod(?nativeMethod),
  ReachableContext(Context(?ctx, ?nativeMethod)),
  NativeExceptionHeapAllocation(?heap, ?nativeMethod),
  ObjectShouldBeRefined(?heap),
  BindRefinedHeapContext(?hctx, ?heap, ?ctx).
#endif

Native:Throws(?method, HeapAbstraction(?heap)) <-
  NativeMethod(?method),
  ThrowPointsTo(HeapAbstraction(?heap), AnyContext(?method)).
#else

ThrownException(HeapAbstraction(?heap)) <-
  Native:Throws(_, HeapAbstraction(?heap)).

Native:Throws(?nativeMethod, ?heap) <-
  Reachable(?nativeMethod),
  NativeMethod(?nativeMethod),
  NativeExceptionHeapAllocation(?heap, ?nativeMethod).

#endif

/**
 * This is a selection of throw sources, selected by Fu et al. for
 * their ISSTA'04 paper.
 */
Fu:ThrowSource(?method) -> MethodSignatureRef(?method).

#define InitFuThrowSource(s) Fu:ThrowSource(?sig) <- MethodSignatureRef:Value(?sig : s).

InitFuThrowSource("<java.net.Socket: void <init>(java.net.InetAddress,int,java.net.InetAddress,int,boolean)>")
InitFuThrowSource("<java.net.Socket: void <init>(java.net.SocketImpl)>")
InitFuThrowSource("<java.net.Socket: void <init>(java.lang.String,int)>")
InitFuThrowSource("<java.net.Socket: void <init>(java.net.InetAddress,int)>")
InitFuThrowSource("<java.net.Socket: void <init>(java.lang.String,int,java.net.InetAddress,int)>")
InitFuThrowSource("<java.net.Socket: void <init>(java.net.InetAddress,int,java.net.InetAddress,int)>")
InitFuThrowSource("<java.net.Socket: void <init>(java.lang.String,int,boolean)>")
InitFuThrowSource("<java.net.Socket: void <init>(java.net.InetAddress,int,boolean)>")

InitFuThrowSource("<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)>")
InitFuThrowSource("<java.net.ServerSocket: void <init>(int)>")
InitFuThrowSource("<java.net.ServerSocket: void <init>(int,int)>")
InitFuThrowSource("<java.net.ServerSocket: void implAccept(java.net.Socket)>")

InitFuThrowSource("<java.net.SocketInputStream: int read(byte[],int,int)>")
InitFuThrowSource("<java.net.SocketInputStream: int read(byte[])>")
InitFuThrowSource("<java.net.SocketInputStream: int read()>")
/* bug in Fu et al. FaultsTable "<java.net.SocketInputStream: int skip(" (should be long) */
/* bug in Fu et al. FaultsTable "<java.net.SocketInputStream: int availale(" (should be available) */

InitFuThrowSource("<java.net.SocketOutputStream: void write(int)>")
InitFuThrowSource("<java.net.SocketOutputStream: void write(byte[])>")
InitFuThrowSource("<java.net.SocketOutputStream: void write(byte[],int,int)>")

InitFuThrowSource("<java.io.FileInputStream: int read()>")
InitFuThrowSource("<java.io.FileInputStream: int read(byte[])>")
InitFuThrowSource("<java.io.FileInputStream: int read(byte[],int,int)>")
/* bug in Fu et al. FaultsTable "<java.io.FileInputStream: int skip(" (should be long) */
InitFuThrowSource("<java.io.FileInputStream: int available()>")

InitFuThrowSource("<java.io.FileOutputStream: void write(byte[],int,int)>")
InitFuThrowSource("<java.io.FileOutputStream: void write(byte[])>")
InitFuThrowSource("<java.io.FileOutputStream: void write(int)>")

InitFuThrowSource("<java.io.RandomAccessFile: int read(byte[])>")
InitFuThrowSource("<java.io.RandomAccessFile: int read(byte[],int,int)>")
InitFuThrowSource("<java.io.RandomAccessFile: int read()>")
InitFuThrowSource("<java.io.RandomAccessFile: int skipBytes(int)>")
InitFuThrowSource("<java.io.RandomAccessFile: void write(byte[],int,int)>")
InitFuThrowSource("<java.io.RandomAccessFile: void write(int)>")
InitFuThrowSource("<java.io.RandomAccessFile: void write(byte[])>")
