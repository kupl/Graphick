/**
 * Context-sensitive pointer analysis with context of 1 object
 * (AND for static calls 1 call-site).
 *
 * @author George Kastrinis
 */

#include "macros.logic"
#include "../context-sensitive.logic"
#include "../library.logic"

// In this analysis, the real context is a HeapAllocationRef AND
// a MethodInvocationRef (for static calls) sometimes. Keeping mapping 
// functions is the way to handle analyses where HContext = Context 
// (since the language considers them different types).
// NOTE: Changed from HeapAllocationRef to CallGraphEdgeSourceRef
// in order to use the invocation site for static calls.
ContextFromRealContext[?heap] = ?ctx ->
  Context(?ctx), CallGraphEdgeSourceRef(?heap).
lang:skolem(`ContextFromRealContext).
// NOTE: Use the following when using both the normal (caller's) context
// and the invocation site for static calls.
SpecialContextFromRealContext[?invocation, ?heap] = ?ctx ->
  Context(?ctx), CallGraphEdgeSourceRef(?invocation), CallGraphEdgeSourceRef(?heap).
lang:skolem(`SpecialContextFromRealContext).
RealContextFromContext[?ctx] = ?heap -> 
  Context(?ctx), CallGraphEdgeSourceRef(?heap).
RealContextFromContext[?ctx] = ?heap <-
  ContextFromRealContext[?heap] = ?ctx.
// NOTE: Use the following when using both the normal (caller's) context
// and the invocation site for static calls.
RealContextFromContext[?ctx] = ?heap <-
  SpecialContextFromRealContext[_, ?heap] = ?ctx.

// This analysis has no context for heap objects.
// This is emulated by creating a single HContext object,
// which is used everywhere.
HContextFromRealHContext[] = ?hctx -> HContext(?hctx).
lang:skolem(`HContextFromRealHContext).
  

// Create initial objects with their heapcontexts.
HContextFromRealHContext[] = ?hctx,
HContext(?hctx),
SystemThreadGroup(?hctx, ?alloc) <-
  MySystemThreadGroup(?alloc).

HContextFromRealHContext[] = ?hctx,
HContext(?hctx),
MainThreadGroup(?hctx, ?alloc) <-
  MyMainThreadGroup(?alloc).

HContextFromRealHContext[] = ?hctx,
HContext(?hctx),
MainThread(?hctx, ?alloc) <-
  MyMainThread(?alloc).
  

/**
 * Reachable
 */
ReachableContext(?ctx, ?method),
ContextFromRealContext[?heap] = ?ctx,
Context(?ctx)
 <-
  MainMethodDeclaration(?method),
  HeapAllocationValue(?heap, "<<initial-context>>").

ReachableContext(?ctx, ?method),
ContextFromRealContext[?heap] = ?ctx,
Context(?ctx)
 <-
  ImplicitReachable(?method),
  HeapAllocationValue(?heap, "<<jvm-startup>>").

ReachableContext(?ctx, ?clinit),
ContextFromRealContext[?heap] = ?ctx,
Context(?ctx)
 <-
  InitializedClass(?class),
  ClassInitializer[?class] = ?clinit,
  HeapAllocationValue(?heap, "<<class-initialization>>").
