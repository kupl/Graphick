/**
 * Context-sensitive pointer analysis with context of 1 object and 1 call-site.
 *
 * @author George Kastrinis
 */

#include "macros.logic"
#include "../context-sensitive.logic"
#include "../library.logic"

// In this analysis, the real context is a HeapAllocationRef and
// a MethodInvocationRef. Keeping mapping 
// functions is the way to handle analyses where HContext = Context 
// (since the language considers them different types).
// NOTE: Changed from HeapAllocationRef to CallGraphEdgeSourceRef
// in order to use the invocation site for static calls.
ContextFromRealContext[?heap, ?invocation] = ?ctx ->
  Context(?ctx), CallGraphEdgeSourceRef(?heap), CallGraphEdgeSourceRef(?invocation).
lang:skolem(`ContextFromRealContext).
RealContext1FromContext[?ctx] = ?heap ->
  Context(?ctx), CallGraphEdgeSourceRef(?heap).
RealContext2FromContext[?ctx] = ?invocation ->
  Context(?ctx), CallGraphEdgeSourceRef(?invocation).

RealContext1FromContext[?ctx] = ?heap,
RealContext2FromContext[?ctx] = ?invocation <-
  ContextFromRealContext[?heap, ?invocation] = ?ctx.

HContextFromRealHContext[] = ?hctx -> HContext(?hctx).
lang:skolem(`HContextFromRealHContext).


// Creating special immutable heap allocation constant
ImmutableHeapValue[] = ?immHeap <-
  HeapAllocationValue(?immHeap, "<<immutable>>").
ImmutableInvValue[] = ?immInv <-
  MethodInvocationValue(?immInv, "<<immutable2>>").
  

// Create initial objects with their heapcontexts.
HContextFromRealHContext[] = ?hctx,
HContext(?hctx),
SystemThreadGroup(?hctx, ?alloc) <-
  MySystemThreadGroup(?alloc).

HContextFromRealHContext[] = ?hctx,
HContext(?hctx),
MainThreadGroup(?hctx, ?alloc) <-
  MyMainThreadGroup(?alloc).

HContextFromRealHContext[] = ?hctx,
HContext(?hctx),
MainThread(?hctx, ?alloc) <-
  MyMainThread(?alloc).

/**
 * Merge optimization hack
 */

// For this analysis, we only need two of the parameters that may 
// influence the new context object.
//MyMergeBasis(?heap, ?invocation) <-
//  MergeBasis(_, _, ?heap, ?invocation).

// We create new context objects sparingly, because of the high cost.
// We also cache them, so they can be looked up without a join.
//Context(?calleeCtx),
//ContextFromRealContext[?heap, ?invocation] = ?calleeCtx,
//OptimizeMerge[?heap, ?invocation] = ?calleeCtx <-
//  MyMergeBasis(?heap, ?invocation).
  

/**
 * Reachable
 */
ReachableContext(?ctx, ?method),
ContextFromRealContext[?heap, ?invocation] = ?ctx,
Context(?ctx)
 <-
  MainMethodDeclaration(?method),
  HeapAllocationValue(?heap, "<<initial-context>>"),
  MethodInvocationValue(?invocation, "<<initial-context2>>").

ReachableContext(?ctx, ?method),
ContextFromRealContext[?heap, ?invocation] = ?ctx,
Context(?ctx)
 <-
  ImplicitReachable(?method),
  HeapAllocationValue(?heap, "<<jvm-startup>>"),
  MethodInvocationValue(?invocation, "<<jvm-startup2>>").

ReachableContext(?ctx, ?clinit),
ContextFromRealContext[?heap, ?invocation] = ?ctx,
Context(?ctx)
 <-
  InitializedClass(?class),
  ClassInitializer[?class] = ?clinit,
  HeapAllocationValue(?heap, "<<class-initialization>>"),
  MethodInvocationValue(?invocation, "<<class-initialization2>>").
