#include "../library/fact-macros.logic"

// We need to *pretend* we are creating new contexts, since the
// product of the macro goes to the head of a rule.
#define RecordMacro(ctx, heap, hctx) \
  HContext(hctx), \
  HContextFromRealHContext[] = hctx

#define RecordImmutableMacro(ctx, heap, immCtx) \
  HContext(immCtx), \
  HContextFromRealHContext[] = immCtx


// For this analysis the context of a method call corresponds to the
// identity of the receiver object and the call-site.
// Again, this may trigger creation of a new object.
#define MergeMacro(callerCtx, invocation, hctx, heap, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[heap, invocation] = calleeCtx

//#define MergeBasisMacro(callerCtx, invocation, hctx, heap) \
//  MergeBasis(hctx, callerCtx, heap, invocation)

//#define OptimizeMergeMacro(callerCtx, invocation, hctx, heap, calleeCtx) \
//  OptimizeMerge[heap, invocation] = calleeCtx

// For this analysis, static calls use the invocation site and
// the receiver object of the caller as a context.
#define MergeStaticMacro(callerCtx, invocation, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[RealContext1FromContext[callerCtx], invocation] = calleeCtx

// MergeThreadStart, MergeStartup, and MergeFinalizerRegisterContext
// have the same logic as plain Merge for this analysis.
#define MergeThreadStartMacro(hctx, heap, callerCtx, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[heap, RealContext2FromContext[callerCtx]] = newCtx

#define MergeStartupMacro(hctx, heap, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[heap, ImmutableInvValue[]] = calleeCtx

#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, heap, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[heap, RealContext2FromContext[callerCtx]] = newCtx
