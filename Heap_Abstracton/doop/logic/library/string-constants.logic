/*************************************************************
 * Special objects
 *
 * Some objects are so common that they heavily impact performance if
 * every allocation is distinguished or a context-sensitive heap
 * abstraction is used. In many cases, this precision is not actually
 * useful for a points-to analysis, so handling them in a less precise
 * way is beneficial.
 *
 * @author Martin Bravenboer
 * @author Yannis Smaragdakis
 *************************************************************/

/**
 * Objects that should not be allocated as normal.
 */
HeapAllocation:Special(?heap) -> HeapAllocationRef(?heap).

/**
 * Objects that should use a context-insensitive heap abstraction.
 */
HeapAllocation:ContextInsensitive(?heap) ->
  HeapAllocationRef(?heap).

HeapAllocation:Special(?heap) <-
  HeapAllocation:ContextInsensitive(?heap).

/**
 * Objects that should be merged to some heap abstraction (implies context-insensitive)
 */
HeapAllocation:Merge[?heap] = ?mergeHeap ->
  HeapAllocationRef(?heap),
  HeapAllocationRef(?mergeHeap).

/**
 * Join with AssignHeapAllocation for performance.
 */
AssignNormalHeapAllocation(?heap, ?var, ?inmethod) <-
  AssignHeapAllocation(?heap, ?var, ?inmethod),
  ! HeapAllocation:Special(?heap).

HeapAllocation:Special(?heap) <-
  HeapAllocation:Merge[?heap] = _.

AssignContextInsensitiveHeapAllocation(?mergeHeap, ?var, ?inmethod) <-
  AssignHeapAllocation(?heap, ?var, ?inmethod),
  HeapAllocation:Merge[?heap] = ?mergeHeap.

#ifdef HEAP_ABSTRACTION
AssignContextInsensitiveHeapAllocation(?heap, ?var, ?inmethod) <-
  AssignHeapAllocation(?heap, ?var, ?inmethod),
  ! ObjectToBeMerged(?heap),
  HeapAllocation:ContextInsensitive(?heap).
#else
AssignContextInsensitiveHeapAllocation(?heap, ?var, ?inmethod) <-
  AssignHeapAllocation(?heap, ?var, ?inmethod),
  HeapAllocation:ContextInsensitive(?heap).
#endif

/*************************************************************
 * String constants
 *************************************************************/

#ifdef PADDLE_COMPAT
HeapAllocation:Merge[?heap] = ?constant <-
  StringConstant(?heap),
  HeapAllocationValue(?constant, "<<string-constant>>").
#endif

#ifndef PADDLE_COMPAT
#ifdef DISTINGUISH_NO_STRING_CONSTANTS
HeapAllocation:Merge[?heap] = ?constant <-
  StringConstant(?heap),
  HeapAllocationValue(?constant, "<<string-constant>>").
#endif

#ifdef DISTINGUISH_CLASS_STRING_CONSTANTS
HeapAllocation:Merge[?heap] = ?constant <-
  StringConstant(?heap),
  ! ClassNameStringConstant(?heap),
  HeapAllocationValue(?constant, "<<string-constant>>").

HeapAllocation:ContextInsensitive(?heap) <-
  ClassNameStringConstant(?heap).
#endif

#ifdef DISTINGUISH_ALL_STRING_CONSTANTS
HeapAllocation:ContextInsensitive(?heap) <-
  StringConstant(?heap).
#endif

/**
 * String constants that refer to class names
 */
ClassNameStringConstant(?heap) ->
  HeapAllocationRef(?heap).
  /* StringConstant(?heap). TODO: bug? */

ClassNameStringConstant:Type[?heap] = ?type ->
  HeapAllocationRef(?heap),
  /* StringConstant(?heap), TODO: bug? */
  Type(?type).

ClassNameStringConstant(?heap),
ClassNameStringConstant:Type[?heap] = ?type
  <-
  StringConstant(?heap),
  InstructionRef:Value(?heap:?string),
  ReferenceType(?type),
  Type:Value(?type:?string).
#endif

/*************************************************************
 * Class constants
 *************************************************************/

HeapAllocation:ContextInsensitive(?heap) <-
  ClassConstant(?heap).

/*************************************************************
 * String buffers and builders
 *************************************************************/

#ifdef MERGE_STRING_BUFFERS
HeapAllocation:Merge[?heap] = ?mergeHeap <-
  HeapAllocation:Type[?heap] = ?type,
  Type:Value(?type:"java.lang.StringBuffer"),
  HeapAllocationValue(?mergeHeap, "<<string-buffer>>").

HeapAllocation:Merge[?heap] = ?mergeHeap <-
  HeapAllocation:Type[?heap] = ?type,
  Type:Value(?type:"java.lang.StringBuilder"),
  HeapAllocationValue(?mergeHeap, "<<string-builder>>").
#endif

/*************************************************************
 * Throwable
 *************************************************************/

#ifndef PADDLE_COMPAT

/*
 // (Yannis) This is the original, precise and straightforward treatment
 // of throwables. They were allocated context insensitively. This still
 // produced huge ThrowPointsTo sets and caused slowdowns.
 */
#ifdef SEPARATE_EXCEPTION_OBJECTS
HeapAllocation:ContextInsensitive(?heap) <-
  HeapAllocation:Type[?heap] = ?heaptype,
  Type:Value(?throw:"java.lang.Throwable"),
  AssignCompatible(?throw, ?heaptype).
#else

// The optimized treatment represents every exception (i.e., throwable)
// object by a unique representative of the same type. All exception
// objects of the same type are therefore merged. This means that points-to
// results for throwables are not accurate! Only the type will be right.

//TypeToHeap2(?heap, ?heaptype) <-
//  HeapAllocation:Type[?heap] = ?heaptype,
	//  Type:Value(?throw:"java.lang.Throwable"),
	//  AssignCompatible(?throw, ?heaptype),
//  ExceptionHandler:Type[_] = ?handlertype,
//  AssignCompatible(?handlertype, ?heaptype).

TypeToHeap(?heap, ?heaptype) <-
  HeapAllocation:Type[?heap] = ?heaptype,
  Type:Value(?throw:"java.lang.Throwable"),
  AssignCompatible(?throw, ?heaptype).

// Quadratic but so local that it shouldn't matter, ever.
HeapRepresentative[?heap] = ?representativeHeap <-
  agg<<?representativeHeap = min(?otherHeap)>>(TypeToHeap(?otherHeap, HeapAllocation:Type[?heap])).

HeapAllocation:Merge[?heap] = ?mergeHeap <-
  HeapRepresentative[?heap] = ?mergeHeap.

#endif // SEPARATE_EXCEPTION_OBJECTS
/*
// An intermediate option is to only merge exception objects of the
// same type that are thrown in the same method.
SameTypeAndMethod(?heap1, ?heap2) <-
  HeapAllocation:Type[?heap1] = ?heaptype,
  Type:Value(?throw:"java.lang.Throwable"),
  AssignCompatible(?throw, ?heaptype),
  HeapAllocation:Type[?heap2] = ?heaptype,
  AssignHeapAllocation(?heap1,_,?inmethod),
  AssignHeapAllocation(?heap2,_,?inmethod).
  
// Similarly quadratic but efficient.
HeapRepresentative[?heap] = ?representativeHeap <-
  agg<<?representativeHeap = min(?otherHeap)>>(SameTypeAndMethod(?otherHeap,?heap)).

HeapAllocation:Merge[?heap] = ?mergeHeap <-
  HeapRepresentative[?heap] = ?mergeHeap.
*/

#endif // ifndef PADDLE_COMPAT

/*************************************************************
 * Primitive arrays
 *
 * char[] or int[] don't have object elements, so it's useless to
 * allocate them context-sensitively.
 *
 *************************************************************/

#ifndef PADDLE_COMPAT
HeapAllocation:ContextInsensitive(?heap) <-
  HeapAllocation:Type[?heap] = ?type,
  ArrayType(?type),
  ComponentType[?type] = ?componentType,
  PrimitiveType(?componentType).
#endif

/*************************************************************
 * Class without reference fields
 *************************************************************/

#ifndef PADDLE_COMPAT
// This is completely in the noise level, not worth doing anything about
/*
HeapAllocation:ContextInsensitive(?heap) <-
  HeapAllocation:Type[?heap] = ?heaptype,
  Type:HasNoReferenceField(?heaptype).

Type:HasNoReferenceField(?type) -> Type(?type).
Type:DeclaresReferenceField(?type) -> Type(?type).

Type:HasNoReferenceField(?type) <-
  Type:Value(?type:"java.lang.Object").

Type:HasNoReferenceField(?class) <-
  ClassType(?class),
  DirectSuperclass[?class] = ?super,
  Type:HasNoReferenceField(?super),
  ! Type:DeclaresReferenceField(?class).

Type:DeclaresReferenceField(?class) <-
  ClassType(?class),
  Field:DeclaringClass[?signature] = ?class,
  Field:Type[?signature] = ?type,
  ReferenceType(?type).
*/

#endif

