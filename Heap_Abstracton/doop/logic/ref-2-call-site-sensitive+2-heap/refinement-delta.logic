#include "macros.logic"

// I call something that has a cast
+TempSiteToRefine(?heap,?invocation) <- 
  VirtualMethodInvocation:Base[?invocation] = ?base,
  VarPointsTo(_, ?heap, _, ?base),  
  HeapAllocation:Type[?heap] = ?heaptype,
  VirtualMethodInvocation:SimpleName[?invocation] = ?simplename,
  VirtualMethodInvocation:Descriptor[?invocation] = ?descriptor,
  MethodLookup[?simplename, ?descriptor, ?heaptype] = ?tomethod,
  AssignCast(_, _, _, ?tomethod).

// I call something that has an allocation site
+TempSiteToRefine(?heap,?invocation) <- 
  VirtualMethodInvocation:Base[?invocation] = ?base,
  VarPointsTo(_, ?heap, _, ?base),  
  HeapAllocation:Type[?heap] = ?heaptype,
  VirtualMethodInvocation:SimpleName[?invocation] = ?simplename,
  VirtualMethodInvocation:Descriptor[?invocation] = ?descriptor,
  MethodLookup[?simplename, ?descriptor, ?heaptype] = ?tomethod,
  Instruction:Method[?someallocation] = ?tomethod,
  AssignHeapAllocation(?someallocation, _, ?tomethod).


/*
// I call something that takes an object argument
+TempSiteToRefine(?heap,?invocation) <- 
  VirtualMethodInvocation:Base[?invocation] = ?base,
  VarPointsTo(_, ?heap, _, ?base),  
  HeapAllocation:Type[?heap] = ?heaptype,
  VirtualMethodInvocation:SimpleName[?invocation] = ?simplename,
  VirtualMethodInvocation:Descriptor[?invocation] = ?descriptor,
  MethodLookup[?simplename, ?descriptor, ?heaptype] = ?tomethod,
  FormalParam[_,?tomethod] = ?someformal,
  Var:Type[?someformal] = ?formaltype,
  Type:Value(?formaltype:"java.lang.Object").
*/

/* 
 This results in a huge relation
// I call something that calls something that has a cast
+TempSiteToRefine(?heap,?invocation) <- 
  VirtualMethodInvocation:Base[?invocation] = ?base,
  VarPointsTo(_, ?heap, _, ?base),  
  HeapAllocation:Type[?heap] = ?heaptype,
  VirtualMethodInvocation:SimpleName[?invocation] = ?simplename,
  VirtualMethodInvocation:Descriptor[?invocation] = ?descriptor,
  MethodLookup[?simplename, ?descriptor, ?heaptype] = ?tomethod,
  CallGraphEdge(_, ?tomethodInvocation, _, ?totomethod),
  Instruction:Method[?tomethodInvocation] = ?tomethod,
  AssignCast(_, _, _, ?totomethod).
*/
