#include "macros.logic"

//Contains lots of different introspective/refinement heuristics

/*
// At first tried handling methods with casts specially. No clear win.
+TempSiteToRefine(?heap,?invocation) <-
  VirtualMethodInvocation:Base[?invocation] = ?base,
  VarPointsTo(AnyHeapAbstraction(?heap), AnyContext(?base)),  
  HeapAllocation:Type[?heap] = ?heaptype,
  VirtualMethodInvocation:SimpleName[?invocation] = ?simplename,
  VirtualMethodInvocation:Descriptor[?invocation] = ?descriptor,
  MethodLookup[?simplename, ?descriptor, ?heaptype] = ?tomethod,
  AssignCast(_, _, _, ?tomethod).
*/

/* THIS DIDN'T WORK TOO WELL. E.g., not great precision for antlr 
// Any object that flows to an array that conflates lots of allocation sites
// is to be excluded by the refined analysis.
_ArrayPointsToFacts[?arr] = ?count -> HeapAllocationRef(?arr), int[64](?count).
+_ArrayPointsToFacts[?arr] = ?count <-
  agg<<?count = count()>>(ArrayIndexPointsTo(_, _, _, ?arr)).

+TempObjectToRefine(?heap) <-
  ArrayIndexPointsTo(_, ?heap, _, ?arr),
  _ArrayPointsToFacts[?arr] = ?count,
  ?count > 500.
+TempNegativeObjectFilter("true").
*/

/* THIS WORKED OK, BUT NOT GREAT. Yielded very precise v-call results for bloat!
// Avoid refining allocation site pointed to by more than K context-sens vars already
_ContextsPerAllocSite[?alloc] = ?count -> HeapAllocationRef(?alloc), int[64](?count).
+_ContextsPerAllocSite[?alloc] = ?count <-
  agg<<?count = count()>>(VarPointsTo(_, ?alloc, _, __)).

+TempObjectToRefine(?alloc) <-
  _ContextsPerAllocSite[?alloc] = ?count,
  ?count > 1500.

+TempNegativeObjectFilter("true").
*/

/* THIS ALSO WORKED FAIRLY OK.
// Avoid refining allocation site with large FieldPointsTo
_FieldPointsToPerAllocSiteAndField[?alloc, ?fld] = ?count -> HeapAllocationRef(?alloc), int[64](?count), FieldSignatureRef(?fld).
+_FieldPointsToPerAllocSiteAndField[?alloc, ?fld] = ?count <-
  agg<<?count = count()>>(InstanceFieldPointsTo(_, _, ?fld, _, ?alloc)).

_MaxFieldPointsToPerAllocSite[?alloc] = ?count -> HeapAllocationRef(?alloc), int[64](?count).
+_MaxFieldPointsToPerAllocSite[?alloc] = ?count <-
  agg<<?count = max(?v)>>(_FieldPointsToPerAllocSiteAndField[?alloc,_] = ?v).

+TempObjectToRefine(?alloc) <-
  _MaxFieldPointsToPerAllocSite[?alloc] = ?count,
  ?count > 200.

+TempNegativeObjectFilter("true").
*/

/* WORKS GREAT, SCALES TO MOST TROUBLE BENCHMARKS, ONLY FAILS ON jython
// Avoid refining method calls that refer to methods containing variables that point
// to heap objects with a high max number of field-points-to facts. This is what
// causes explosion for deep-context analyses.

_FieldPointsToPerAllocSiteAndField[?alloc, ?fld] = ?count -> HeapAllocationRef(?alloc), int[64](?count), FieldSignatureRef(?fld).
+_FieldPointsToPerAllocSiteAndField[?alloc, ?fld] = ?count <-
  agg<<?count = count()>>(InstanceFieldPointsTo(_, _, ?fld, _, ?alloc)).

_MaxFieldPointsToPerAllocSite[?alloc] = ?count -> HeapAllocationRef(?alloc), int[64](?count).
+_MaxFieldPointsToPerAllocSite[?alloc] = ?count <-
  agg<<?count = max(?v)>>(_FieldPointsToPerAllocSiteAndField[?alloc,_] = ?v).

+TempSiteToRefine(?heap,?invocation) <-
  VirtualMethodInvocation:Base[?invocation] = _, // make sure it's a normal invocation
  CallGraphEdge(_, ?invocation, ?calleeCtx, ?tomethod),
  RealContext3FromContext[?calleeCtx] = ?heap,
  VarPointsTo(_, ?alloc, ?ctx, ?var),
  RealContext3FromContext[?ctx] = ?heap,
  _MaxFieldPointsToPerAllocSite[?alloc] = ?count,
  ?count > 200,
  Var:DeclaringMethod(?var, ?tomethod).

+TempNegativeObjectFilter("true").
*/

// Avoid refining method calls that refer to methods containing variables with a high
// VarPointsTo volume. This is equal to all 1-obj VarPointsTo facts, i.e., a product of
// contexts and actual heap objects. This may be a better indicator of whether the
// analysis will explode in complexity.

_HeapAbstractionsPerVar[?var] = ?count -> VarRef(?var), int[64](?count).
+_HeapAbstractionsPerVar[?var] = ?count <-
  agg<<?count = count()>>(VarPointsTo(_, _, _, ?var)).

+TempSiteToRefine(?heap, ?invocation) <-
  VirtualMethodInvocation:Base[?invocation] = _, // make sure it's a normal invocation
  CallGraphEdge(_, ?invocation, ?calleeCtx, ?tomethod),
  RealContext3FromContext[?calleeCtx] = ?heap,
  _HeapAbstractionsPerVar[?var] > 1000,
  Var:DeclaringMethod(?var, ?tomethod).

//+TempNegativeSiteFilter("true").

/*
// Avoid refining method calls that refer to methods containing variables with a high
// VarPointsTo. Note that the VarPointsTo is computed context-sensitively. I.e.,
// even though we take the max over all possible variables in the target method,
// the receiver object is known and is used as context.

_HeapAbstractionsPer1ObjVar[?ctx,?var] = ?count -> VarRef(?var), int[64](?count), HeapAllocationRef(?ctx).
+_HeapAbstractionsPer1ObjVar[?ctx,?var] = ?count <-
  agg<<?count = count()>>(VarPointsTo(AnyHeapAbstraction(_), _, ?ctx, ?var)).

+TempSiteToRefine(?heap,?invocation) <-
  VirtualMethodInvocation:Base[?invocation] = _, // make sure it's a normal invocation
  CallGraphEdge(AnyContext(?invocation), _, ?heap, ?tomethod),
  _HeapAbstractionsPer1ObjVar[?heap, ?var] = ?count,
  ?count > 400,
  Var:DeclaringMethod(?var, ?tomethod).
*/

//+TempNegativeObjectFilter("true").
//+TempNegativeSiteFilter("true").
