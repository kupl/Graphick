#include "../library/fact-macros.logic"

// For this analysis, every heap context recorded on allocation
// corresponds to the most significant element of the calling 
// context of the allocator method.
#define RecordMacro(ctx, heap, hctx) \
  HContext(hctx), \
  HContextFromRealHContext[RealContext2FromContext[ctx]] = hctx

#define RecordImmutableMacro(ctx, heap, immCtx) \
  HContext(immCtx), \
  HContextFromRealHContext[ImmutableTypeValue[]] = immCtx


// For this analysis the context of a method call corresponds to the
// declaring classes of the receiver object and the receiver object of the caller.
// Again, this may trigger creation of a new object.
#define MergeMacro(callerCtx, invocation, hctx, heap, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[RealHContextFromHContext[hctx], \
                         ClassToInstr[DeclaringClassAllocation[heap]]] = calleeCtx

#define MergeBasisMacro(callerCtx, invocation, hctx, heap) \
  MergeBasis(callerCtx, invocation, hctx, heap)

#define OptimizeMergeMacro(callerCtx, invocation, hctx, heap, calleeCtx) \
  OptimizeMerge[hctx, heap] = calleeCtx

// For this analysis, static calls use additionally the invocation site as a context.
#define MergeStaticMacro(callerCtx, invocation, calleeCtx) \
  Context(calleeCtx), \
  SpecialContextFromRealContext[RealContext1FromContext[callerCtx], invocation, \
                         		RealContext2FromContext[callerCtx]] = calleeCtx

// MergeThreadStart, MergeStartup, and MergeFinalizerRegisterContext
// have the same logic as plain Merge for this analysis.
#define MergeThreadStartMacro(hctx, heap, callerCtx, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[RealHContextFromHContext[hctx], \
                         ClassToInstr[DeclaringClassAllocation[heap]]] = newCtx

#define MergeStartupMacro(hctx, heap, calleeCtx) \
  Context(calleeCtx), \
  ContextFromRealContext[RealHContextFromHContext[hctx], \
                         ClassToInstr[DeclaringClassAllocation[heap]]] = calleeCtx

#define MergeFinalizerRegisterContextMacro(callerCtx, inmethod, heap, newCtx) \
  Context(newCtx), \
  ContextFromRealContext[RealContext2FromContext[callerCtx], \
                         ClassToInstr[DeclaringClassAllocation[heap]]] = newCtx
