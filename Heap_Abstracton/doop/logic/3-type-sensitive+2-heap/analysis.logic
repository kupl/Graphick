/**
 * Context-sensitive pointer analysis with context of 3 types and a
 * context-sensitive heap abstraction.
 *
 * @author George Kastrinis
 */

#include "macros.logic"
#include "../context-sensitive.logic"
#include "../library.logic"
#include "../object-to-type.logic"

// In this analysis, the real context is a triplet of Types
// and the real heap context a pair of Types. Keeping mapping 
// functions is the way to handle analyses where HContext = Context 
// (since the language considers them different types).
// The type is not always a class type, because of arrays currently being
// a non-class subtype of Object
ContextFromRealContext[?type1, ?type2, ?type3] = ?ctx ->
  Context(?ctx), Type(?type1), Type(?type2), Type(?type3).
lang:skolem(`ContextFromRealContext).
RealContext1FromContext[?ctx] = ?type -> 
  Context(?ctx), Type(?type).
RealContext2FromContext[?ctx] = ?type -> 
  Context(?ctx), Type(?type).
RealContext3FromContext[?ctx] = ?type -> 
  Context(?ctx), Type(?type).

RealContext1FromContext[?ctx] = ?type1,
RealContext2FromContext[?ctx] = ?type2,
RealContext3FromContext[?ctx] = ?type3 <- 
  ContextFromRealContext[?type1, ?type2, ?type3] = ?ctx.

HContextFromRealHContext[?type1, ?type2] = ?hctx ->
  HContext(?hctx), Type(?type1), Type(?type2).
lang:skolem(`HContextFromRealHContext).
RealHContext1FromHContext[?hctx] = ?type -> 
  HContext(?hctx), Type(?type).
RealHContext2FromHContext[?hctx] = ?type -> 
  HContext(?hctx), Type(?type).

RealHContext1FromHContext[?hctx] = ?type1,
RealHContext2FromHContext[?hctx] = ?type2 <-
  HContextFromRealHContext[?type1, ?type2] = ?hctx.

// Creating special immutable type constant
ImmutableTypeValue[] = ?immType <-
  Type:Value(?immType:"<<immutable>>").


// Create initial objects with their heapcontexts.
HContextFromRealHContext[?type1, ?type2] = ?hctx,
HContext(?hctx),
SystemThreadGroup(?hctx, ?alloc) <-
  MySystemThreadGroup(?type1, ?type2, ?alloc).

HContextFromRealHContext[?type1, ?type2] = ?hctx,
HContext(?hctx),
MainThreadGroup(?hctx, ?alloc) <-
  MyMainThreadGroup(?type1, ?type2, ?alloc).

HContextFromRealHContext[?type1, ?type2] = ?hctx,
HContext(?hctx),
MainThread(?hctx, ?alloc) <-
  MyMainThread(?type1, ?type2, ?alloc).

/**
 * Merge optimization hack
 */

// For this analysis, we only need two of the parameters that may 
// influence the new context object.
MyMergeBasis(?hctx, ?heap) <-
  MergeBasis(_, _, ?hctx, ?heap).

// We create new context objects sparingly, because of the high cost.
// We also cache them, so they can be looked up without a join.
Context(?calleeCtx),
ContextFromRealContext[RealHContext1FromHContext[?hctx],
                       RealHContext2FromHContext[?hctx],
                       DeclaringClassAllocation[?heap]] = ?calleeCtx,
OptimizeMerge[?hctx, ?heap] = ?calleeCtx <-
  MyMergeBasis(?hctx, ?heap).


/**
 * Reachable
 */
ReachableContext(?ctx, ?method),
ContextFromRealContext[?type1, ?type2, ?type3] = ?ctx,
Context(?ctx)
 <-
  MainMethodDeclaration(?method),
  Type:Value(?type1:"<<initial-context>>"),
  Type:Value(?type2:"<<initial-context>>"),
  ClassTypeValue(?type3, "java.lang.String").

ReachableContext(?ctx, ?method),
ContextFromRealContext[?type1, ?type2, ?type3] = ?ctx,
Context(?ctx)
 <-
  ImplicitReachable(?method),
  Type:Value(?type1:"<<jvm-startup>>"),
  Type:Value(?type2:"<<jvm-startup>>"),
  ClassTypeValue(?type3, "java.lang.String").

ReachableContext(?ctx, ?clinit),
ContextFromRealContext[?type1, ?type2, ?type3] = ?ctx,
Context(?ctx)
 <-
  InitializedClass(?class),
  ClassInitializer[?class] = ?clinit,
  Type:Value(?type1:"<<class-initialization>>"),
  Type:Value(?type2:"<<class-initialization>>"),
  ClassTypeValue(?type3, "java.lang.String").
