/**
 * @author George Kastrinis
 */

#include "macros.logic"
#include "../context-sensitive.logic"
#include "../library.logic"

// In this analysis, both the real context and the real heap context 
// are triplets of HeapAllocationRefs. Keeping mapping 
// functions is the way to handle analyses where HContext = Context 
// (since the language considers them different types).
ContextFromRealContext[?heap1, ?heap2, ?heap3] = ?ctx ->
  Context(?ctx), HeapAllocationRef(?heap1), HeapAllocationRef(?heap2), HeapAllocationRef(?heap3).
lang:skolem(`ContextFromRealContext).
RealContext1FromContext[?ctx] = ?heap -> 
  Context(?ctx), HeapAllocationRef(?heap).
RealContext2FromContext[?ctx] = ?heap -> 
  Context(?ctx), HeapAllocationRef(?heap).
RealContext3FromContext[?ctx] = ?heap -> 
  Context(?ctx), HeapAllocationRef(?heap).

RealContext1FromContext[?ctx] = ?heap1,
RealContext2FromContext[?ctx] = ?heap2,
RealContext3FromContext[?ctx] = ?heap3 <-
  ContextFromRealContext[?heap1, ?heap2, ?heap3] = ?ctx.

HContextFromRealHContext[?heap1, ?heap2, ?heap3] = ?hctx ->
  HContext(?hctx), HeapAllocationRef(?heap1), HeapAllocationRef(?heap2), HeapAllocationRef(?heap3).
lang:skolem(`HContextFromRealHContext).

RealHContext1FromHContext[?hctx] = ?heap -> 
  HContext(?hctx), HeapAllocationRef(?heap).
RealHContext2FromHContext[?hctx] = ?heap -> 
  HContext(?hctx), HeapAllocationRef(?heap).
RealHContext3FromHContext[?hctx] = ?heap -> 
  HContext(?hctx), HeapAllocationRef(?heap).

RealHContext1FromHContext[?hctx] = ?heap1,
RealHContext2FromHContext[?hctx] = ?heap2,
RealHContext3FromHContext[?hctx] = ?heap3 <-
  HContextFromRealHContext[?heap1, ?heap2, ?heap3] = ?hctx.

// Creating special immutable heap allocation constant
ImmutableHeapValue[] = ?immHeap <-
  HeapAllocationValue(?immHeap, "<<immutable>>").


// Create initial objects with their heapcontexts.
HContextFromRealHContext[?heap1, ?heap2, ?heap3] = ?hctx,
HContext(?hctx),
SystemThreadGroup(?hctx, ?alloc) <-
  MySystemThreadGroup(?heap1, ?heap2, ?heap3, ?alloc).

HContextFromRealHContext[?heap1, ?heap2, ?heap3] = ?hctx,
HContext(?hctx),
MainThreadGroup(?hctx, ?alloc) <-
  MyMainThreadGroup(?heap1, ?heap2, ?heap3, ?alloc).

HContextFromRealHContext[?heap1, ?heap2, ?heap3] = ?hctx,
HContext(?hctx),
MainThread(?hctx, ?alloc) <-
  MyMainThread(?heap1, ?heap2, ?heap3, ?alloc).

/**
 * Merge optimization hack
 */

// For this analysis, we only need two of the parameters that may 
// influence the new context object.
MyMergeBasis(?hctx, ?heap) <-
  MergeBasis(_, _, ?hctx, ?heap).

// We create new context objects sparingly, because of the high cost.
// We also cache them, so they can be looked up without a join.
Context(?calleeCtx),
ContextFromRealContext[RealHContext2FromHContext[?hctx],
                       RealHContext3FromHContext[?hctx],
                       ?heap] = ?calleeCtx,
OptimizeMerge[?hctx, ?heap] = ?calleeCtx <-
  MyMergeBasis(?hctx, ?heap).


/**
 * Reachable
 */
ReachableContext(?ctx, ?method),
ContextFromRealContext[?initheap, ?initheap, ?initheap] = ?ctx,
Context(?ctx)
 <-
  MainMethodDeclaration(?method),
  HeapAllocationValue(?initheap, "<<initial-context>>").

ReachableContext(?ctx, ?method),
ContextFromRealContext[?startupheap, ?startupheap, ?startupheap] = ?ctx,
Context(?ctx)
 <-
  ImplicitReachable(?method),
  HeapAllocationValue(?startupheap, "<<jvm-startup>>").

ReachableContext(?ctx, ?clinit),
ContextFromRealContext[?clinitheap, ?clinitheap, ?clinitheap] = ?ctx,
Context(?ctx)
 <-
  InitializedClass(?class),
  ClassInitializer[?class] = ?clinit,
  HeapAllocationValue(?clinitheap, "<<class-initialization>>").
