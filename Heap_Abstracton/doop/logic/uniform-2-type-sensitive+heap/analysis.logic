/**
 * Context-sensitive pointer analysis with context of 2 types and 1 call-site and a
 * context-sensitive heap abstraction.
 *
 * @author George Kastrinis
 */

#include "macros.logic"
#include "../context-sensitive.logic"
#include "../library.logic"
#include "../object-to-type.logic"

ClassHasInstr(?class, ?instr) <- DeclaringClassMethod[?method] = ?class, Instruction:Method[?instr] = ?method.
ClassToInstr[?class] = ?instr <- agg<<?instr = min(?otherInstr)>>(ClassHasInstr(?class, ?otherInstr)).

// In this analysis, the real context is a pair of HeapAllocationRefs and
// a MethodInvocationRef. Keeping mapping 
// functions is the way to handle analyses where HContext = Context 
// (since the language considers them different types).
// NOTE: Changed from HeapAllocationRef to CallGraphEdgeSourceRef
// in order to use the invocation site for static calls.
ContextFromRealContext[?type1, ?invocation, ?type2] = ?ctx ->
  InstructionRef(?type1), InstructionRef(?type2),
  InstructionRef(?invocation), Context(?ctx). 
lang:skolem(`ContextFromRealContext).
RealContext1FromContext[?ctx] = ?type -> 
  Context(?ctx), InstructionRef(?type).
RealContext2FromContext[?ctx] = ?invocation -> 
  Context(?ctx), InstructionRef(?invocation).
RealContext3FromContext[?ctx] = ?type -> 
  Context(?ctx), InstructionRef(?type).

RealContext1FromContext[?ctx] = ?type1,
RealContext2FromContext[?ctx] = ?invocation,
RealContext3FromContext[?ctx] = ?type2 <- 
  ContextFromRealContext[?type1, ?invocation, ?type2] = ?ctx.

HContextFromRealHContext[?type] = ?hctx ->
  HContext(?hctx), InstructionRef(?type).
lang:skolem(`HContextFromRealHContext).
RealHContextFromHContext[?hctx] = ?type -> 
  HContext(?hctx), InstructionRef(?type).

RealHContextFromHContext[?hctx] = ?type <-
  HContextFromRealHContext[?type] = ?hctx.

// Creating special immutable type constant
ImmutableTypeValue[] = ?immType <-
  InstructionRef:Value(?immType:"<<immutable>>").

// Creating special immutable heap allocation constant
ImmutableInvValue[] = ?immInv <-
  MethodInvocationValue(?immInv, "<<immutable2>>").


// Create initial objects with their heapcontexts.
HContextFromRealHContext[?type] = ?hctx,
HContext(?hctx),
SystemThreadGroup(?hctx, ?alloc) <-
  MySystemThreadGroup(?type, ?alloc).

HContextFromRealHContext[?type] = ?hctx,
HContext(?hctx),
MainThreadGroup(?hctx, ?alloc) <-
  MyMainThreadGroup(?type, ?alloc).

HContextFromRealHContext[?type] = ?hctx,
HContext(?hctx),
MainThread(?hctx, ?alloc) <-
  MyMainThread(?type, ?alloc).

/**
 * Merge optimization hack
 */

// For this analysis, we only need two of the parameters that may 
// influence the new context object.
MyMergeBasis(?hctx, ?invocation, ?heap) <-
  MergeBasis(_, ?hctx, ?invocation, ?heap).

// We create new context objects sparingly, because of the high cost.
// We also cache them, so they can be looked up without a join.
Context(?calleeCtx),
ContextFromRealContext[RealHContextFromHContext[?hctx], ?invocation, ClassToInstr[DeclaringClassAllocation[?heap]]] = ?calleeCtx,
OptimizeMerge[?hctx, ?invocation, ?heap] = ?calleeCtx <-
  MyMergeBasis(?hctx, ?invocation, ?heap).

  
/**
 * Reachable
 */
ReachableContext(?ctx, ?method),
ContextFromRealContext[?typeCtx1,?invocation,?typeCtx2] = ?ctx,
Context(?ctx)
 <-
  MainMethodDeclaration(?method),
  ClassTypeValue(?class1, "java.lang.String"),
  ClassToInstr[?class1] = ?typeCtx1,
  InstructionRef:Value(?typeCtx2:"<<initial-context>>"),
  MethodInvocationValue(?invocation, "<<initial-context2>>").

ReachableContext(?ctx, ?method),
ContextFromRealContext[?typeCtx1,?invocation,?typeCtx2] = ?ctx,
Context(?ctx)
 <-
  ImplicitReachable(?method),
  ClassTypeValue(?class1, "java.lang.String"),
  ClassToInstr[?class1] = ?typeCtx1,
  InstructionRef:Value(?typeCtx2:"<<jvm-startup>>"),
  MethodInvocationValue(?invocation, "<<jvm-startup2>>").

ReachableContext(?ctx, ?clinit),
ContextFromRealContext[?typeCtx1,?invocation,?typeCtx2] = ?ctx,
Context(?ctx)
 <-
  InitializedClass(?class),
  ClassInitializer[?class] = ?clinit,
  ClassTypeValue(?class1, "java.lang.String"),
  ClassToInstr[?class1] = ?typeCtx1,
  InstructionRef:Value(?typeCtx2:"<<class-initialization>>"),
  MethodInvocationValue(?invocation, "<<class-initialization2>>").
